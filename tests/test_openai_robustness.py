#!/usr/bin/env python3
"""
Test de robustesse de l'int√©gration OpenAI
V√©rifie la gestion des erreurs r√©seau et la validation des cl√©s API
"""

import os
import sys
import time
from dotenv import load_dotenv

# Charger l'environnement
load_dotenv()

# Ajouter le r√©pertoire backend au path
sys.path.append(os.path.join(os.path.dirname(__file__)))

def test_openai_key_validation():
    """Test la fonction de validation de cl√© OpenAI"""
    print("=== Test de validation de cl√© OpenAI ===")
    
    from app import verify_openai_key
    
    # Test avec une cl√© vide
    print("Test 1: Cl√© vide")
    result = verify_openai_key("")
    print(f"R√©sultat: {result} (attendu: False)")
    assert not result, "Une cl√© vide devrait √™tre invalide"
    
    # Test avec une cl√© mal form√©e
    print("Test 2: Cl√© mal form√©e")
    result = verify_openai_key("invalid-key")
    print(f"R√©sultat: {result} (attendu: False)")
    assert not result, "Une cl√© mal form√©e devrait √™tre invalide"
    
    # Test avec une cl√© bien form√©e mais probablement invalide
    print("Test 3: Cl√© bien form√©e mais invalide")
    result = verify_openai_key("sk-1234567890abcdef1234567890abcdef1234567890abcdef")
    print(f"R√©sultat: {result}")
    # Cette cl√© peut √™tre consid√©r√©e comme valide en cas d'erreur r√©seau
    
    # Test avec la vraie cl√© (si disponible)
    real_key = os.getenv("OPENAI_API_KEY")
    if real_key:
        print("Test 4: Cl√© r√©elle depuis .env")
        result = verify_openai_key(real_key)
        print(f"R√©sultat: {result}")
    else:
        print("Test 4: Aucune cl√© r√©elle trouv√©e dans .env")
    
    print("‚úÖ Tests de validation de cl√© termin√©s\n")

def test_openai_chains_resilience():
    """Test la r√©silience des cha√Ænes OpenAI"""
    print("=== Test de r√©silience des cha√Ænes OpenAI ===")
    
    try:
        # Importer le module OpenAI
        import langchain_chains_openai
        print("‚úÖ Module OpenAI import√© avec succ√®s")
        
        # Test de la fonction de chat avec gestion d'erreurs
        print("Test de la fonction de chat...")
        try:
            response = langchain_chains_openai.generate_chat_response("Qu'est-ce que le paludisme?")
            print(f"R√©ponse re√ßue (longueur: {len(response)} caract√®res)")
            print(f"D√©but de la r√©ponse: {response[:100]}...")
            print("‚úÖ Chat fonctionne correctement")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur dans le chat (mais g√©r√©e): {e}")
        
        # Test de recommandation (plus complexe)
        print("\nTest de la fonction de recommandation...")
        try:
            import pandas as pd
            
            # Charger le CSV de test
            csv_path = "data/baseplante.csv"
            if os.path.exists(csv_path):
                df = pd.read_csv(csv_path)
                response = langchain_chains_openai.get_recommendation("J'ai de la fi√®vre et des frissons", df, csv_path)
                print(f"Recommandation re√ßue: {type(response)}")
                if isinstance(response, dict):
                    print(f"Cl√©s disponibles: {list(response.keys())}")
                print("‚úÖ Recommandation fonctionne")
            else:
                print(f"‚ö†Ô∏è Fichier CSV non trouv√©: {csv_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur dans la recommandation (mais peut √™tre g√©r√©e): {e}")
            import traceback
            traceback.print_exc()
        
    except ImportError as e:
        print(f"‚ùå Impossible d'importer le module OpenAI: {e}")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
    
    print("‚úÖ Tests de r√©silience termin√©s\n")

def test_fallback_mechanism():
    """Test le m√©canisme de fallback vers HuggingFace"""
    print("=== Test du m√©canisme de fallback ===")
    
    # Simuler une cl√© OpenAI invalide temporairement
    original_key = os.environ.get("OPENAI_API_KEY")
    
    try:
        # Supprimer temporairement la cl√© pour tester le fallback
        if "OPENAI_API_KEY" in os.environ:
            del os.environ["OPENAI_API_KEY"]
        
        from app import get_llm_module
        
        # Recharger la configuration
        module = get_llm_module()
        print(f"Module s√©lectionn√©: {module.__name__}")
        
        # V√©rifier que c'est bien HuggingFace
        if "huggingface" in module.__name__.lower() or "langchain_chains" in module.__name__:
            print("‚úÖ Fallback vers HuggingFace r√©ussi")
        else:
            print(f"‚ö†Ô∏è Fallback inattendu vers: {module.__name__}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors du test de fallback: {e}")
    finally:
        # Restaurer la cl√© originale
        if original_key:
            os.environ["OPENAI_API_KEY"] = original_key
    
    print("‚úÖ Test de fallback termin√©\n")

def main():
    """Ex√©cuter tous les tests"""
    print("üß™ D√©but des tests de robustesse OpenAI\n")
    start_time = time.time()
    
    try:
        test_openai_key_validation()
        test_openai_chains_resilience() 
        test_fallback_mechanism()
        
        duration = time.time() - start_time
        print(f"üéâ Tous les tests termin√©s en {duration:.2f} secondes")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
