#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test complet pour valider le fonctionnement des deux modes aiBotanik
"""

import requests
import json
import time

BASE_URL = "http://localhost:8000"

def test_discussion_mode():
    """Test du mode Discussion (chat)"""
    print("üî• Test du mode Discussion...")
    
    url = f"{BASE_URL}/chat"
    data = {"message": "Bonjour, pouvez-vous me parler de la phytoth√©rapie africaine?"}
    
    try:
        response = requests.post(url, json=data, timeout=30)
        print(f"Statut: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ R√©ponse re√ßue: {result.get('response', 'Aucune r√©ponse')[:100]}...")
            print(f"Backend utilis√©: {result.get('backend', 'Non sp√©cifi√©')}")
            return True
        else:
            print(f"‚ùå Erreur {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_consultation_mode():
    """Test du mode Consultation (recommend)"""
    print("üî• Test du mode Consultation...")
    
    url = f"{BASE_URL}/recommend"
    data = {"symptoms": "Je pense avoir le paludisme avec de la fi√®vre et des frissons"}
    
    try:
        response = requests.post(url, json=data, timeout=30)
        print(f"Statut: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            # V√©rifier les champs requis
            required_fields = [
                "plant", "dosage", "prep", "image_url", "explanation", 
                "contre_indications", "partie_utilisee", "composants", "nom_local"
            ]
            
            missing_fields = [field for field in required_fields if field not in result]
            if missing_fields:
                print(f"‚ùå Champs manquants: {missing_fields}")
                return False
            
            print(f"‚úÖ Plante recommand√©e: {result.get('plant', 'Non sp√©cifi√©')}")
            print(f"‚úÖ Explanation pr√©sente: {len(result.get('explanation', ''))} caract√®res")
            
            # V√©rifier que l'explication contient les sections attendues
            explanation = result.get('explanation', '')
            required_sections = [
                "Diagnostic possible", "Sympt√¥mes associ√©s", "Pr√©sentation de", 
                "Mode d'action", "Informations de traitement", 
                "Pr√©cautions et contre-indications", "Composants actifs", "R√©sum√© de traitement"
            ]
            
            missing_sections = [section for section in required_sections if section not in explanation]
            if missing_sections:
                print(f"‚ö†Ô∏è Sections manquantes dans l'explication: {missing_sections}")
            else:
                print("‚úÖ Toutes les sections structur√©es sont pr√©sentes")
            
            # V√©rifier que les champs n'affichent pas "NULL"
            for field_name, field_value in result.items():
                if isinstance(field_value, str) and "NULL" in field_value.upper():
                    print(f"‚ö†Ô∏è Le champ '{field_name}' contient encore NULL: {field_value}")
            
            return True
            
        else:
            print(f"‚ùå Erreur {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_llm_configuration():
    """Test de la configuration LLM"""
    print("üî• Test de la configuration LLM...")
    
    url = f"{BASE_URL}/admin/config/llm"
    
    try:
        response = requests.get(url, timeout=10)
        print(f"Statut: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Backend actuel: {result.get('current_backend', 'Non sp√©cifi√©')}")
            print(f"‚úÖ Cl√© OpenAI configur√©e: {result.get('has_openai_key', False)}")
            print(f"‚úÖ Cl√© HuggingFace configur√©e: {result.get('has_hf_key', False)}")
            return True
        else:
            print(f"‚ùå Erreur {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ D√©marrage des tests aiBotanik")
    print("=" * 50)
    
    # Test de la configuration
    config_ok = test_llm_configuration()
    print("-" * 50)
    
    # Test du mode Discussion
    discussion_ok = test_discussion_mode()
    print("-" * 50)
    
    # Test du mode Consultation
    consultation_ok = test_consultation_mode()
    print("-" * 50)
    
    # R√©sum√©
    print("üìä R√âSUM√â DES TESTS:")
    print(f"Configuration LLM: {'‚úÖ OK' if config_ok else '‚ùå √âCHEC'}")
    print(f"Mode Discussion: {'‚úÖ OK' if discussion_ok else '‚ùå √âCHEC'}")
    print(f"Mode Consultation: {'‚úÖ OK' if consultation_ok else '‚ùå √âCHEC'}")
    
    if config_ok and discussion_ok and consultation_ok:
        print("\nüéâ TOUS LES TESTS SONT PASS√âS ! Le syst√®me fonctionne correctement.")
        return True
    else:
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les d√©tails ci-dessus.")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
