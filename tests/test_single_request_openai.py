#!/usr/bin/env python3
"""
Test pour v√©rifier qu'UNE SEULE REQU√äTE est faite vers OpenAI
"""

import requests
import json
from unittest.mock import patch
import logging

def test_single_openai_request():
    """Test pour confirmer qu'une seule requ√™te OpenAI est faite par consultation"""
    print("üîç Test de v√©rification : UNE SEULE requ√™te OpenAI par consultation")
    print("=" * 70)
    
    # Compter les appels vers OpenAI
    openai_call_count = 0
    openai_urls = []
    
    # Capturer les requ√™tes HTTP vers OpenAI
    original_requests_post = requests.post
    
    def count_openai_http_calls(url, *args, **kwargs):
        global openai_call_count, openai_urls
        if "api.openai.com" in url:
            openai_call_count += 1
            openai_urls.append(url)
            print(f"ÔøΩ Requ√™te HTTP OpenAI #{openai_call_count}: {url}")
        return original_requests_post(url, *args, **kwargs)
    
    try:
        print("üì° Test via API REST...")
        payload = {"symptoms": "j'ai des sympt√¥mes de paludisme"}
        headers = {"Content-Type": "application/json"}
        
        # Patch les requ√™tes pour compter les appels vers OpenAI
        with patch('requests.post', side_effect=count_openai_http_calls):
            print("üì§ Envoi de la requ√™te de consultation...")
            response = requests.post('http://localhost:8001/recommend', json=payload, headers=headers)
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Consultation r√©ussie via API")
            else:
                print(f"‚ùå Erreur API: {response.status_code}")
                print(f"   R√©ponse: {response.text}")
                return
        
        print("\n" + "=" * 70)
        print(f"üìä R√âSULTAT DU COMPTAGE:")
        print(f"üî¢ Nombre total d'appels OpenAI: {openai_call_count}")
        
        if openai_urls:
            print("üìã URLs appel√©es:")
            for i, url in enumerate(openai_urls, 1):
                print(f"   {i}. {url}")
        
        if openai_call_count == 1:
            print("‚úÖ SUCC√àS: UNE SEULE requ√™te OpenAI effectu√©e !")
            print("‚úÖ La contrainte est respect√©e.")
        elif openai_call_count == 0:
            print("‚ö†Ô∏è ATTENTION: Aucun appel OpenAI d√©tect√©")
            print("   Possible utilisation de cache ou configuration incorrecte")
        else:
            print(f"‚ùå √âCHEC: {openai_call_count} requ√™tes OpenAI d√©tect√©es")
            print("‚ùå La contrainte d'une seule requ√™te n'est PAS respect√©e")
        
        print("=" * 70)
        
        # V√©rifier que tous les champs structur√©s sont pr√©sents
        if 'result' in locals() and result:
            required_fields = ['diagnostic', 'symptomes', 'presentation', 'mode_action', 
                             'traitement_info', 'precautions_info', 'composants_info', 'resume_traitement']
            
            present_fields = [field for field in required_fields if result.get(field)]
            missing_fields = [field for field in required_fields if not result.get(field)]
            
            print(f"üìã Champs structur√©s pr√©sents: {len(present_fields)}/{len(required_fields)}")
            if missing_fields:
                print(f"‚ö†Ô∏è Champs manquants: {missing_fields}")
            else:
                print("‚úÖ Tous les champs structur√©s sont pr√©sents")
                
            print("\nüìù Aper√ßu des champs extraits:")
            for field in present_fields[:3]:  # Afficher les 3 premiers champs
                content = str(result.get(field, ''))[:80] + "..." if len(str(result.get(field, ''))) > 80 else str(result.get(field, ''))
                print(f"   {field}: {content}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_single_openai_request()
