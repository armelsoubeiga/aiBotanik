import os
import time
import pickle
import requests
import json
import pandas as pd
import traceback
from langchain_core.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.docstore.document import Document
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.llms import HuggingFaceHub
from typing import Optional, Dict, Any, List
from dotenv import load_dotenv
import logging

# Configurer le logging pour avoir plus d'informations sur les erreurs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Fonction pour utiliser l'API HuggingFace Inference directement via requests
def generate_huggingface_response(prompt: str, api_key: str, model_id: str = "google/flan-t5-base", 
                                  max_length: int = 200, temperature: float = 0.7) -> str:
    """
    Utilise l'API HuggingFace Inference directement via requests pour g√©n√©rer une r√©ponse.
    Cette approche √©vite les probl√®mes de compatibilit√© entre les diff√©rentes biblioth√®ques.
    """
    api_url = f"https://api-inference.huggingface.co/models/{model_id}"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_length": max_length,
            "temperature": temperature,
            "return_full_text": False
        },
        "options": {
            "wait_for_model": True,
            "use_cache": True
        }    }
    
    try:
        logger.info(f"Envoi de requ√™te √† HuggingFace pour le mod√®le '{model_id}'")
        response = requests.post(api_url, headers=headers, json=payload)
        
        # V√©rifier si la requ√™te a r√©ussi
        if response.status_code == 200:
            result = response.json()
            logger.info(f"R√©ponse API re√ßue: {result}")
            
            # Gestion des diff√©rents formats de r√©ponse selon le mod√®le
            if isinstance(result, list) and len(result) > 0:
                # Format pour les mod√®les comme Falcon
                if "generated_text" in result[0]:
                    return result[0]["generated_text"].strip()
                else:
                    return str(result[0]).strip()
            elif isinstance(result, dict):
                # Format pour les mod√®les comme T5
                if "generated_text" in result:
                    return result["generated_text"].strip()
                else:
                    # Essayer d'extraire le texte, quel que soit le format
                    return str(result.get("text", result)).strip()
            else:
                # Autres formats possibles
                return str(result).strip()
        else:
            # En cas d'erreur, afficher les d√©tails
            logger.error(f"Erreur API HuggingFace: {response.status_code} - {response.text}")
            return ""
    except Exception as e:
        logger.error(f"Exception lors de l'appel √† HuggingFace: {str(e)}")
        return ""

# Charger les variables d'environnement
load_dotenv()
UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")
HF_API_KEY = os.getenv("HF_API_KEY")

# Configurer la cl√© Hugging Face pour LangChain
if HF_API_KEY:
    os.environ["HUGGINGFACEHUB_API_TOKEN"] = HF_API_KEY

# Chemin pour stocker l'index vectoriel
VECTORSTORE_PATH = os.path.join("data", "faiss_index.pkl")
METADATA_PATH = os.path.join("data", "vector_metadata.pkl")

# Initialiser Embeddings 
emb = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

# Prompt template
template = """
Tu es un expert en phytoth√©rapie africaine avec une approche tr√®s humaine et p√©dagogique. Pour les sympt√¥mes d√©crits: {symptoms},
et en consid√©rant les donn√©es de la plante: {plant_data}, formule une explication compl√®te et structur√©e selon les sections suivantes dans cet ordre exact:

Diagnostic possible
Analyse les sympt√¥mes avec compassion et explique quelle pathologie est probablement √©voqu√©e. Mets en MAJUSCULES le nom de la pathologie identifi√©e. Parle directement au patient comme dans une consultation en face √† face.

Sympt√¥mes associ√©s
Pr√©sente les sympt√¥mes typiques de cette pathologie de mani√®re p√©dagogique, en expliquant pourquoi ils apparaissent et comment ils se manifestent habituellement.

Pr√©sentation de {plant_name}
Pr√©sente cette plante comme le ferait un conteur traditionnel, en incluant son histoire, ses usages traditionnels et sa place dans la culture m√©dicinale africaine. Sois passionnant et √©vocateur, pour donner envie de d√©couvrir cette plante.

Mode d'action
Explique les m√©canismes d'action de la plante en termes simples mais scientifiquement exacts, comme un professeur passionn√© qui veut rendre la science accessible. Explique comment la plante interagit avec le corps pour traiter la pathologie identifi√©e.

Informations de traitement
Pr√©sente les informations de dosage, pr√©paration et parties utilis√©es en les transformant en v√©ritables conseils pratiques et accessibles, comme le ferait un herboriste exp√©riment√© expliquant un rem√®de √† un novice. Int√®gre les donn√©es brutes suivantes de mani√®re fluide et naturelle:
- Pr√©paration: {preparation}
- Dosage: {dosage} 
- Parties utilis√©es: {parties_utilisees}

Pr√©cautions et contre-indications
Transforme les donn√©es brutes suivantes: "{contre_indications}" en explications d√©taill√©es des risques et pr√©cautions. Humanise compl√®tement le langage technique. Explique POURQUOI ces pr√©cautions sont importantes pour la s√©curit√© du patient, pas seulement lesquelles. Ajoute des conseils concrets pour minimiser les risques.

Composants actifs
Transforme la liste brute des composants suivants: "{composants}" en explications sur les principaux compos√©s actifs et leurs effets th√©rapeutiques sp√©cifiques. Explique comment ces compos√©s naturels agissent en synergie.

R√©sum√© de traitement
Synth√©tise en 3-4 phrases claires le diagnostic et le traitement recommand√©, comme si tu devais laisser au patient une ordonnance simple √† suivre. Ce r√©sum√© doit √™tre facilement m√©morisable et expliciter clairement la posologie recommand√©e et la dur√©e du traitement.

R√©ponds en fran√ßais avec un ton chaleureux, rassurant, et conversationnel. √âvite absolument le langage technique ou clinique. Chaque section doit commencer par son titre simple sans num√©rotation ni formatage sp√©cial, et doit √™tre suivie d'un paragraphe substantiel qui humanise compl√®tement les donn√©es brutes. Utilise un langage simple mais pr√©cis, et assure-toi que tes explications soient accessibles m√™me pour quelqu'un sans formation m√©dicale.
"""
prompt = PromptTemplate(input_variables=["symptoms", "plant_data", "plant_name", "preparation", "dosage", "parties_utilisees", "contre_indications", "composants"], template=template)

# Fonction pour initialiser le mod√®le LLM Hugging Face
def initialize_llm():
    """Initialise le mod√®le LLM Hugging Face avec gestion d'erreurs"""
    try:
        if not HF_API_KEY:
            logger.error("‚ùå Cl√© API Hugging Face non configur√©e dans le fichier .env")
            return None
            
        logger.info(f"üîß Initialisation du mod√®le Hugging Face avec la cl√©: {HF_API_KEY[:10]}...")
        
        llm = HuggingFaceHub(
            repo_id="google/flan-t5-base",
            model_kwargs={
                "temperature": 0.7,
                "max_length": 512,
                "do_sample": True,
                "return_full_text": False
            }
        )
        
        # Test rapide du mod√®le
        test_response = llm.invoke("Test: Hello")
        logger.info(f"‚úÖ Mod√®le Hugging Face initialis√© avec succ√®s. Test: '{test_response}'")
        return llm
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation du mod√®le Hugging Face: {e}")
        import traceback
        traceback.print_exc()
        return None

# Mod√®le LLM pour les consultations (recommandations sp√©cifiques)
llm = initialize_llm()
# Cha√Æne LLM pour les consultations
chain = LLMChain(llm=llm, prompt=prompt) if llm else None

# Mod√®le LLM s√©par√© pour le chat (discussions g√©n√©rales)
# Sera initialis√© lors du premier appel √† generate_chat_response()
llm_chat = None

def fetch_image(plant_name: str) -> str:
    url = f"https://api.unsplash.com/search/photos?query={plant_name}&client_id={UNSPLASH_KEY}&per_page=1"
    resp = requests.get(url).json()
    return resp["results"][0]["urls"]["small"] if resp["results"] else ""

# Fonctions pour la gestion de l'index vectoriel
def get_csv_last_modified(csv_path):
    """Obtenir la date de derni√®re modification du fichier CSV source"""
    try:
        if not os.path.exists(csv_path):
            print(f"AVERTISSEMENT: Le fichier CSV n'existe pas: {csv_path}")
            return 0
        mtime = os.path.getmtime(csv_path)
        print(f"Derni√®re modification du CSV: {csv_path} - {mtime}")
        return mtime
    except OSError as e:
        print(f"Erreur lors de l'acc√®s au fichier CSV: {e}")
        return 0

def create_documents_from_df(df):
    """Cr√©er les documents √† vectoriser √† partir du DataFrame"""
    documents = []
    for idx, row in df.iterrows():
        # Cr√©er un contenu enrichi pour chaque plante avec les sympt√¥mes qu'elle traite
        content = f"Sympt√¥mes: {row.get('maladiesoigneeparrecette', '')}\n"
        content += f"Plante: {row.get('plante_recette', '')}\n"
        content += f"Dosage: {row.get('plante_quantite_recette', '')}\n"
        content += f"Pr√©paration: {row.get('recette', '')}"
        
        # Cr√©er un document avec metadata pour faciliter la r√©cup√©ration
        metadata = {
            "plant_name": str(row.get('plante_recette', '')).split(';')[0].strip(),
            "index": idx
        }
        documents.append(Document(page_content=content, metadata=metadata))
    return documents

def build_and_save_vectorstore(df, csv_path):
    """Construire et sauvegarder l'index vectoriel"""
    try:
        # Cr√©er les documents
        documents = create_documents_from_df(df)
        
        # Vectoriser les documents
        vs = FAISS.from_documents(documents, emb)
        
        # Cr√©er le dossier de donn√©es s'il n'existe pas
        os.makedirs(os.path.dirname(VECTORSTORE_PATH), exist_ok=True)
        
        # Sauvegarder le vectorstore
        with open(VECTORSTORE_PATH, "wb") as f:
            pickle.dump(vs, f)
        
        # Sauvegarder les m√©tadonn√©es
        metadata = {
            "last_modified": get_csv_last_modified(csv_path),
            "document_count": len(documents),
            "created_at": time.time()
        }
        with open(METADATA_PATH, "wb") as f:
            pickle.dump(metadata, f)
        
        print(f"Vectorstore cr√©√© et sauvegard√© avec {len(documents)} documents")
        return vs
    except Exception as e:
        print(f"Erreur lors de la cr√©ation du vectorstore: {e}")
        return None

def should_rebuild_index(csv_path):
    """D√©terminer si l'index doit √™tre reconstruit en fonction des modifications du fichier CSV"""
    # Si les fichiers de l'index n'existent pas, reconstruire
    if not os.path.exists(VECTORSTORE_PATH) or not os.path.exists(METADATA_PATH):
        print("Index vectoriel non trouv√©, cr√©ation requise")
        return True
    
    try:
        # Charger les m√©tadonn√©es
        with open(METADATA_PATH, "rb") as f:
            metadata = pickle.load(f)
        
        # V√©rifier si le CSV a √©t√© modifi√© depuis la derni√®re construction
        current_mtime = get_csv_last_modified(csv_path)
        last_indexed_mtime = metadata.get("last_modified", 0)
        
        if current_mtime > last_indexed_mtime:
            print(f"Le fichier CSV a √©t√© modifi√© ({time.ctime(current_mtime)})")
            print(f"Derni√®re indexation: {time.ctime(last_indexed_mtime)}")
            return True
        
        return False
    except Exception as e:
        print(f"Erreur lors de la v√©rification de l'index: {e}")
        return True

def load_or_build_vectorstore(df, csv_path):
    """Charger l'index vectoriel existant ou en cr√©er un nouveau si n√©cessaire"""
    if should_rebuild_index(csv_path):
        print("Construction d'un nouvel index vectoriel...")
        return build_and_save_vectorstore(df, csv_path)
    
    try:
        # Charger l'index existant
        with open(VECTORSTORE_PATH, "rb") as f:
            vs = pickle.load(f)
        print("Index vectoriel charg√© avec succ√®s depuis le disque")
        return vs
    except Exception as e:
        print(f"Erreur lors du chargement de l'index: {e}, reconstruction...")
        return build_and_save_vectorstore(df, csv_path)

# Fonction principale pour obtenir des recommandations
def get_recommendation(symptoms: str, df, csv_path="data/baseplante.csv"):
    import pandas as pd
    
    # D√©clarer les variables globales au d√©but
    global vectorstore, llm, chain
    
    # Initialiser le vectorstore une seule fois et le mettre en cache
    if 'vectorstore' not in globals() or vectorstore is None:
        # Charge ou construit l'index vectoriel selon si le fichier source a √©t√© modifi√©
        vectorstore = load_or_build_vectorstore(df, csv_path)
    
    # V√©rifier si le vectorstore a √©t√© initialis√© avec succ√®s
    vectorstore_initialized = vectorstore is not None    # Approche RAG: Recherche s√©mantique avec embeddings
    matches = None
    if vectorstore_initialized:
        try:
            print(f"Recherche s√©mantique pour les sympt√¥mes: '{symptoms}'")
            # Effectuer une recherche par similarit√© s√©mantique
            similar_docs = vectorstore.similarity_search(symptoms, k=3)
            
            if similar_docs:
                # R√©cup√©rer l'index du document le plus similaire
                most_similar_doc = similar_docs[0]
                doc_index = most_similar_doc.metadata.get('index')
                
                if doc_index is not None:
                    print(f"Document similaire trouv√© avec index: {doc_index}")
                    plant_data = df.iloc[doc_index].to_dict()
                    matches = pd.DataFrame([plant_data])
                    print(f"RAG: Document trouv√© avec similarit√©: {most_similar_doc.metadata.get('plant_name')}")
                else:
                    print("Document trouv√© mais sans index dans les m√©tadonn√©es")
            else:
                print("Aucun document similaire trouv√©")
        except Exception as e:
            print(f"Erreur lors de la recherche s√©mantique: {e}")
            import traceback
            traceback.print_exc()
    
    # Fallback: m√©thode de recherche par mots-cl√©s si la recherche s√©mantique √©choue
    if matches is None or len(matches) == 0:
        print("Fallback √† la recherche par mots-cl√©s")
        # Nettoyage et pr√©paration du texte de recherche
        clean_symptoms = symptoms.lower()
        
        # Enlever les expressions courantes et nettoyer le texte
        for phrase in ["je pense que j'ai", "j'ai", "je souffre de", "je crois que", "traitement pour", "soigner", "gu√©rir"]:
            clean_symptoms = clean_symptoms.replace(phrase, "")
        clean_symptoms = clean_symptoms.strip()
        
        # Dictionnaire de synonymes et termes associ√©s pour am√©liorer la recherche
        symptom_mapping = {
            "palud": ["malaria", "palu", "fi√®vre", "frissons"],
            "malaria": ["paludisme", "palu", "fi√®vre", "frissons"],
            "diarrh√©e": ["ventre", "intestin", "selles", "liquide"],
            "constipation": ["intestin", "selles", "difficile"],
            "fi√®vre": ["temp√©rature", "chaud", "corps"],
            "toux": ["respiration", "poumon", "gorge"],
            "mal de t√™te": ["t√™te", "migraine", "c√©phal√©e"],
            "douleur": ["mal", "souffrance"]
        }
        
        # V√©rifier d'abord les correspondances directes
        for keyword, synonyms in symptom_mapping.items():
            if keyword in clean_symptoms or any(syn in clean_symptoms for syn in synonyms):
                search_term = keyword  # Utiliser le terme principal pour la recherche
                print(f"Correspondance trouv√©e pour le terme: {keyword} via {synonyms if keyword not in clean_symptoms else 'correspondance directe'}")
                matches = df[df["maladiesoigneeparrecette"].str.contains(search_term, case=False, na=False, regex=True)]
                if not matches.empty:
                    break
        
        # Si toujours pas de correspondance, essayer une recherche plus g√©n√©rale
        if matches is None or len(matches) == 0:
            matches = df[df["maladiesoigneeparrecette"].str.contains(clean_symptoms, case=False, na=False)]
      # Si toujours pas de correspondance, renvoyer le paludisme par d√©faut
    if matches.empty:
        if "palud" in clean_symptoms or "malaria" in clean_symptoms:
            matches = df[df["maladiesoigneeparrecette"].str.contains("malaria|paludisme", case=False, na=False, regex=True)]
    
    # Si toujours pas de correspondance, renvoyer une erreur
    if matches.empty:
        raise ValueError(f"Aucune plante trouv√©e pour les sympt√¥mes: {symptoms}. Veuillez essayer une description plus pr√©cise comme 'paludisme', 'diarrh√©e', etc.")
      # R√©cup√©rer la premi√®re correspondance
    plant = matches.iloc[0].to_dict()
    plant_data = plant
    
    # Extraire le nom de la plante (premi√®re plante de la liste)
    plant_names = plant.get("plante_recette", "").split(";")[0].strip() if plant.get("plante_recette") else "Plante inconnue"
    
    # Obtenir l'image
    try:
        image_url = plant.get("image_url") or fetch_image(plant_names)
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration d'image: {e}")
        image_url = ""
      # Extraire les informations importantes
    dosage = plant.get("plante_quantite_recette", "Dosage non sp√©cifi√©")
    preparation = plant.get("recette", "Pr√©paration non sp√©cifi√©e")
    contre_indications = plant.get("recette_contreindication", "") or plant.get("plante_contreindication", "Aucune contre-indication sp√©cifi√©e")
    partie_utilisee = plant.get("plante_partie_recette", "Partie non sp√©cifi√©e")
    composants = plant.get("plante_composantechimique", "Composants chimiques non sp√©cifi√©s")
    nom_local = plant.get("plante_nomlocal", "")
    langue = plant.get("nomlocal_danslalangue", "")
    pays = plant.get("danslalangue_dupays", "")
      # Formater les composants chimiques pour une meilleure lisibilit√©
    if composants and ";" in composants:
        composants_par_plante = {}
        composants_parts = composants.split(";")
        
        for part in composants_parts:
            if ":" in part:
                plante, composant = part.split(":", 1)
                plante = plante.strip()
                composant = composant.strip()
                
                # Ne pas ajouter les composants NULL
                if "NULL" not in composant.upper():
                    if plante not in composants_par_plante:
                        composants_par_plante[plante] = []
                    
                    composants_par_plante[plante].append(composant)
        
        composants_lignes = []
        for plante, comps in composants_par_plante.items():
            if comps:  # S'assurer qu'il y a des composants valides
                composants_lignes.append(f"{plante}: {', '.join(comps)}")
        
        if composants_lignes:
            composants = "\n".join(composants_lignes)
        else:
            # Si aucun composant valide n'est trouv√©
            composants = "Composants chimiques sp√©cifiques non disponibles actuellement"
    elif "NULL" in composants.upper():
        composants = "Composants chimiques sp√©cifiques non disponibles actuellement"
    
    # Traitement des noms locaux pour un affichage plus compact
    nom_local_info = ""
    if nom_local and langue and pays:
        # Extraction des noms principaux
        noms_locaux_simplifies = {}
        
        # Si les cha√Ænes contiennent des points-virgules, les traiter comme des listes
        if ";" in nom_local:
            noms_plantes_raw = nom_local.split(";")
            langues_raw = langue.split(";") if ";" in langue else [langue] * len(noms_plantes_raw)
            pays_raw = pays.split(";") if ";" in pays else [pays] * len(noms_plantes_raw)
            
            # Extraire uniquement les 3 premiers noms locaux les plus courants
            plant_counts = {}
            for nom in noms_plantes_raw:
                # Extraire juste le nom sans la partie plante
                if ":" in nom:
                    plant_name, local_name = nom.split(":", 1)
                    plant_name = plant_name.strip()
                    # Compter les occurrences de chaque plante principale
                    if plant_name not in plant_counts:
                        plant_counts[plant_name] = 0
                    plant_counts[plant_name] += 1
            
            # Trier par nombre d'occurrences et prendre les 3 plus fr√©quentes
            main_plants = sorted(plant_counts.keys(), key=lambda x: plant_counts[x], reverse=True)[:3]
            
            # Construire une liste des noms locaux par plante principale
            for plant_name in main_plants:
                noms_locaux_simplifies[plant_name] = []
                
            # Limiter √† 5 noms locaux maximum par plante principale
            for i, nom in enumerate(noms_plantes_raw):
                if i >= len(langues_raw) or i >= len(pays_raw):
                    break
                    
                if ":" in nom:
                    plant_name, local_name = nom.split(":", 1)
                    plant_name = plant_name.strip()
                    local_name = local_name.strip()
                    
                    if plant_name in main_plants:
                        langue_nom = langues_raw[i].strip() if i < len(langues_raw) else ""
                        pays_nom = pays_raw[i].strip() if i < len(pays_raw) else ""
                        
                        if len(noms_locaux_simplifies[plant_name]) < 5:  # Limiter √† 5 noms par plante
                            if langue_nom and pays_nom:
                                noms_locaux_simplifies[plant_name].append(f"{local_name} ({langue_nom}, {pays_nom})")
            
            # Formatage du texte final
            plant_infos = []
            for plant_name, noms in noms_locaux_simplifies.items():
                if noms:
                    # Filtrer les noms contenant "NULL"
                    noms_valides = [nom for nom in noms if "NULL" not in nom]
                    if noms_valides:
                        noms_text = ", ".join(noms_valides[:5])  # Limiter √† 5 noms locaux par plante
                        plant_infos.append(f"{plant_name} est connue sous le nom de: {noms_text}")
            
            if plant_infos:
                nom_local_info = "Noms locaux: " + ". ".join(plant_infos)
        else:
            # Cas simple: un seul nom local, v√©rifier qu'il n'est pas NULL
            if "NULL" not in nom_local:
                nom_local_info = f"Nom local: {nom_local} en {langue} ({pays})."
            else:
                nom_local_info = ""
    
    # Extraire les pathologies trait√©es
    pathologies = plant.get('maladiesoigneeparrecette', 'Non sp√©cifi√©')
    
    # Correction des pathologies en cas d'incoh√©rence
    # Corriger sp√©cifiquement le cas o√π les sympt√¥mes contiennent "paludisme" mais 
    # la pathologie renvoy√©e est autre chose que paludisme/malaria
    if "palud" in symptoms.lower() or "malaria" in symptoms.lower():
        if not ("palud" in pathologies.lower() or "malaria" in pathologies.lower()):
            print(f"Correction de la pathologie: {pathologies} -> paludisme (bas√© sur les sympt√¥mes)")
            pathologies = "paludisme"
    
    # Am√©liorer la description des sympt√¥mes pour le paludisme
    symptomes_detailles = ""
    if "palud" in pathologies.lower() or "malaria" in pathologies.lower():
        symptomes_detailles = "fi√®vre intermittente avec pics √©lev√©s, maux de t√™te intenses, frissons, sueurs, fatigue extr√™me, douleurs musculaires et articulaires, parfois naus√©es et vomissements"
    else:
        symptomes_detailles = "fi√®vre, douleurs, faiblesse g√©n√©rale"
    
    # Am√©liorer la description du mode d'action
    mode_action = ""
    if "cryptolepia" in plant_names.lower():
        mode_action = f"{plant_names} contient de la cryptol√©pine et d'autres alcalo√Ødes qui poss√®dent des propri√©t√©s antiparasitaires puissantes contre le Plasmodium (parasite responsable du paludisme). Ces compos√©s inhibent la croissance du parasite dans les globules rouges et r√©duisent la charge parasitaire dans le sang."
    elif "cymbopogon" in plant_names.lower():
        mode_action = f"{plant_names} contient du citral et d'autres compos√©s terp√©niques qui poss√®dent des propri√©t√©s anti-inflammatoires et antipyr√©tiques (contre la fi√®vre). Cette plante aide √† soulager les sympt√¥mes du paludisme tout en renfor√ßant le syst√®me immunitaire."
    elif "khaya" in plant_names.lower():
        mode_action = f"{plant_names} (acajou du S√©n√©gal) contient des limono√Ødes et des saponines qui ont d√©montr√© des effets antipaludiques significatifs. Ces compos√©s aident √† r√©duire la parasit√©mie et √† soulager les sympt√¥mes li√©s √† l'infection."
    elif "moringa" in plant_names.lower():
        mode_action = f"{plant_names} est extr√™mement nutritif et contient des compos√©s anti-inflammatoires et antioxydants qui aident l'organisme √† combattre l'infection paludique tout en renfor√ßant le syst√®me immunitaire affaibli par la maladie."
    else:
        mode_action = f"{plant_names} est efficace contre {pathologies} gr√¢ce √† ses compos√©s actifs qui agissent sur les sympt√¥mes et aident √† combattre les agents pathog√®nes responsables de la maladie."
    
    # Format plus clair pour le dosage
    dosage_info = ""
    if ";" in dosage:
        dosage_parts = dosage.split(";")
        dosage_info = "Posologie recommand√©e (en grammes de plante s√©ch√©e par litre d'eau):\n"
        for part in dosage_parts:
            if ":" in part:
                plante, quantite = part.split(":", 1)
                plante = plante.strip()
                quantite = quantite.strip()
                if quantite and quantite.lower() != "null":
                    dosage_info += f"- {plante}: {quantite}g\n"
                else:
                    dosage_info += f"- {plante}: quantit√© standard (1 poign√©e ou 20-30g)\n"
            else:
                part = part.strip()
                if part and part.lower() != "null":
                    dosage_info += f"- {part}\n"
    else:
        if dosage and dosage.lower() != "null":
            dosage_info = f"Dosage recommand√©: {dosage}"
        else:
            dosage_info = "Dosage recommand√©: une poign√©e (environ 20-30g) de plante s√©ch√©e dans un litre d'eau"
    
    # Formatter les parties de plantes utilis√©es avec une meilleure pr√©sentation
    parties_info = ""
    if ";" in partie_utilisee:
        parties_parts = partie_utilisee.split(";")
        parties_info = "Parties des plantes √† utiliser:\n"
        for part in parties_parts:
            if ":" in part:
                plante, partie = part.split(":", 1)
                plante = plante.strip()
                partie = partie.strip()
                
                # Ne pas afficher les NULL
                if partie.lower() == "null":
                    partie = "parties habituellement utilis√©es en phytoth√©rapie"
                    
                # Traduire les parties en fran√ßais
                partie_fr = partie.lower()
                if "root" in partie_fr:
                    partie_fr = "racines"
                elif "leaves" in partie_fr:
                    partie_fr = "feuilles"
                elif "bark" in partie_fr:
                    partie_fr = "√©corce"
                elif "fruit" in partie_fr:
                    partie_fr = "fruits"
                elif "seed" in partie_fr:
                    partie_fr = "graines"
                elif "flower" in partie_fr:
                    partie_fr = "fleurs"
                elif "stem" in partie_fr:
                    partie_fr = "tiges"
                
                parties_info += f"- {plante}: {partie_fr}\n"
            else:
                part = part.strip()
                if part and part.lower() != "null":
                    parties_info += f"- {part}\n"
    else:
        if partie_utilisee and partie_utilisee.lower() != "null":
            parties_info = f"Parties utilis√©es: {partie_utilisee}"
        else:
            parties_info = "Parties utilis√©es: les parties habituellement employ√©es en phytoth√©rapie pour cette plante"
    
    # Formatter les pr√©cautions et contre-indications
    precautions_info = contre_indications
    if contre_indications:
        # Traduire les contre-indications en fran√ßais
        precautions_info = contre_indications.lower()
        precautions_info = precautions_info.replace("child under", "Enfants de moins de")
        precautions_info = precautions_info.replace("gastric ulceration", "Ulc√®re gastrique")
        precautions_info = precautions_info.replace("a mother who is producing milk and breastfeeding", "Femmes allaitantes")
        precautions_info = precautions_info.replace("pregnancy", "Femmes enceintes")
        precautions_info = precautions_info.replace(";", ", ")
      # Mettre en majuscules la pathologie pour la mettre en √©vidence
    pathologie_maj = pathologies.upper() if pathologies else "NON SP√âCIFI√â"
      # G√©n√©rer une explication structur√©e m√™me sans LLM

    fallback_explanation = f"""
    [AVERTISSEMENT] Diagnostic informatif (mode assistance)
    
    Notre syst√®me d'intelligence artificielle principal n'a pas pu analyser votre cas de mani√®re approfondie. Les informations suivantes sont bas√©es sur des correspondances g√©n√©rales dans notre base de donn√©es. D'apr√®s vos sympt√¥mes d√©crits: "{symptoms}", les donn√©es sugg√®rent qu'il pourrait s'agir de {pathologie_maj}. Cette √©valuation n'est pas un diagnostic m√©dical d√©finitif. Cette condition requiert une attention particuli√®re et un avis m√©dical professionnel.

    Sympt√¥mes associ√©s
    
    Les sympt√¥mes typiquement associ√©s au {pathologies} incluent: {symptomes_detailles}. Ces manifestations sont caus√©es par la r√©action du corps √† l'infection ou au d√©s√©quilibre qu'il subit.
    
    Pr√©sentation de {plant_names}
    
    La plante {plant_names} est une esp√®ce m√©dicinale tr√®s valoris√©e dans la pharmacop√©e traditionnelle africaine. Elle est utilis√©e depuis des g√©n√©rations par les gu√©risseurs pour traiter diverses affections, particuli√®rement le {pathologies}. Son utilisation s'inscrit dans une longue tradition de m√©decine naturelle d√©velopp√©e par les communaut√©s locales.
    
    Mode d'action
    
    {mode_action} Cette plante agit progressivement et de fa√ßon naturelle pour r√©tablir l'√©quilibre du corps et renforcer ses d√©fenses naturelles.
    
    Informations de traitement
    
    Pr√©paration: {preparation}
    
    {dosage_info}
    Pour une efficacit√© optimale, respectez pr√©cis√©ment ce dosage. Ces quantit√©s correspondent √† la dose journali√®re pour un adulte, √† diviser en 2-3 prises par jour.
    
    {parties_info}
    Ces parties sp√©cifiques contiennent la plus forte concentration de principes actifs th√©rapeutiques n√©cessaires au traitement.
    
    Pr√©cautions et contre-indications
    
    Pour votre s√©curit√©, veuillez noter les contre-indications suivantes: {precautions_info}
    
    Ces pr√©cautions sont importantes car certains compos√©s de la plante peuvent interagir avec d'autres m√©dicaments ou aggraver certaines conditions m√©dicales pr√©existantes. En cas de doute, consultez toujours un professionnel de sant√©.
    
    Composants actifs
    
    La plante {plant_names} contient des composants actifs naturels comme {composants[:100]}... qui agissent ensemble pour cr√©er un effet th√©rapeutique synergique. Ces substances sont √† l'origine de l'efficacit√© traditionnellement reconnue de cette plante.
      R√©sum√© de traitement
    
    Pour traiter le {pathologies}, pr√©parez une d√©coction de {plant_names} selon les instructions. Prenez la dose recommand√©e 2-3 fois par jour pendant 7 jours. Si les sympt√¥mes persistent apr√®s 3 jours ou s'aggravent, consultez imm√©diatement un professionnel de sant√©. Respectez les pr√©cautions mentionn√©es pour un traitement s√ªr et efficace.
    """
      # Extraction des variables de toute fa√ßon pour les utiliser dans l'explication
    preparation = plant_data.get('recette', 'Pr√©paration non sp√©cifi√©e')
    dosage = plant_data.get('plante_quantite_recette', 'Non sp√©cifi√©')
    parties_utilisees = plant_data.get('plante_partie_recette', 'Non sp√©cifi√©')
    contre_indications = f"{plant_data.get('recette_contreindication', '')} {plant_data.get('plante_contreindication', '')}"
    composants = plant_data.get('plante_composantechimique', '')
    
    # Utiliser directement l'explication de secours pour √©viter les probl√®mes avec l'API Hugging Face
    print("Utilisation de l'explication de secours pour √©viter les probl√®mes d'API")    # Cr√©er les sections individuelles pour plus de clart√©
    diagnostic = f"Diagnostic possible\n\nAVERTISSEMENT: Je ne peux pas acc√©der au mod√®le d'IA principal pour le moment. D'apr√®s vos sympt√¥mes d√©crits: \"{symptoms}\", il est possible que vous souffriez de {pathologies.upper()}. Je ne suis pas en mesure de g√©n√©rer un diagnostic pr√©cis. Cette suggestion est bas√©e uniquement sur des correspondances g√©n√©rales dans notre base de donn√©es et non sur une analyse m√©dicale. Une consultation avec un professionnel de sant√© est fortement recommand√©e."
    
    symptomes = f"Sympt√¥mes associ√©s\n\nLes sympt√¥mes typiquement associ√©s au {pathologies} incluent: {symptomes_detailles}. Ces manifestations sont caus√©es par l'action du parasite Plasmodium sur l'organisme."
    
    presentation = f"Pr√©sentation de {plant_names}\n\nLa plante {plant_names} est une esp√®ce m√©dicinale traditionnelle tr√®s valoris√©e dans la pharmacop√©e africaine. Les gu√©risseurs l'utilisent depuis des g√©n√©rations pour traiter diverses affections, particuli√®rement le {pathologies}."
    
    mode = f"Mode d'action\n\n{mode_action} Cette plante agit progressivement et de fa√ßon naturelle pour r√©tablir l'√©quilibre du corps."
    
    traitement = f"Informations de traitement\n\nPr√©paration: {preparation}\n\n{dosage_info}\nPour une efficacit√© optimale, respectez pr√©cis√©ment ce dosage. Ces quantit√©s correspondent √† la dose journali√®re pour un adulte, √† diviser en 2-3 prises.\n\n{parties_info}\nCes parties sp√©cifiques contiennent la plus forte concentration de principes actifs n√©cessaires au traitement."
    
    precautions = f"Pr√©cautions et contre-indications\n\nPour votre s√©curit√©, veuillez noter les contre-indications suivantes: {precautions_info}\n\nCes pr√©cautions sont importantes car certains compos√©s de la plante peuvent interagir avec d'autres m√©dicaments ou aggraver certaines conditions m√©dicales pr√©existantes."
    
    composants_text = f"Composants actifs\n\nLa plante {plant_names} contient des composants actifs naturels comme {composants[:100]}... qui agissent ensemble pour cr√©er un effet th√©rapeutique."
    
    resume = f"R√©sum√© de traitement\n\nPour traiter le {pathologies}, pr√©parez une d√©coction de {plant_names} selon les instructions indiqu√©es. Prenez la dose recommand√©e 2-3 fois par jour pendant 7 jours. Si les sympt√¥mes persistent apr√®s 3 jours ou s'aggravent, consultez imm√©diatement un professionnel de sant√©."
      # Combiner toutes les sections
    explanation = f"{diagnostic}\n\n{symptomes}\n\n{presentation}\n\n{mode}\n\n{traitement}\n\n{precautions}\n\n{composants_text}\n\n{resume}"
      # üéØ PRIORIT√â: Utiliser LangChain avec le mod√®le Hugging Face
    llm_success = False
    try:
        if chain is not None:
            logger.info("üöÄ PRIORIT√â: Tentative d'utilisation de LangChain avec le mod√®le Hugging Face...")
            
            # Formatter les donn√©es pour le prompt
            plant_data_formatted = f"Plante: {plant_names}, Pathologies trait√©es: {pathologies}, Pr√©paration: {preparation}, Dosage: {dosage}"
            
            logger.info(f"üìù Envoi du prompt √† LangChain pour les sympt√¥mes: '{symptoms}'")
            
            # Appeler la cha√Æne LangChain
            llm_response = chain.run({
                "symptoms": symptoms,
                "plant_data": plant_data_formatted,
                "plant_name": plant_names,
                "preparation": preparation,
                "dosage": dosage,
                "parties_utilisees": partie_utilisee,
                "contre_indications": contre_indications,
                "composants": composants            })
            
            logger.info(f"üì® R√©ponse re√ßue de LangChain (longueur: {len(llm_response) if llm_response else 0})")
            
            if llm_response and len(llm_response.strip()) > 50:  # R√©duire le seuil pour accepter plus de r√©ponses
                logger.info("‚úÖ R√©ponse LangChain accept√©e et utilis√©e")
                explanation = llm_response.strip()
                llm_success = True
            else:
                logger.warning(f"‚ö†Ô∏è R√©ponse LangChain trop courte ({len(llm_response) if llm_response else 0} caract√®res), contenu: '{llm_response}'")
        else:
            logger.error("‚ùå LangChain non disponible - chain est None")
            # Tenter de r√©initialiser le LLM
            logger.info("üîÑ Tentative de r√©initialisation du LLM...")
            llm = initialize_llm()
            if llm:
                chain = LLMChain(llm=llm, prompt=prompt)
                logger.info("üîß LLM r√©initialis√©, nouvelle tentative...")
                
                # Nouvelle tentative apr√®s r√©initialisation
                plant_data_formatted = f"Plante: {plant_names}, Pathologies trait√©es: {pathologies}, Pr√©paration: {preparation}, Dosage: {dosage}"
                
                llm_response = chain.run({
                    "symptoms": symptoms,
                    "plant_data": plant_data_formatted,
                    "plant_name": plant_names,
                    "preparation": preparation,
                    "dosage": dosage,
                    "parties_utilisees": partie_utilisee,
                    "contre_indications": contre_indications,
                    "composants": composants
                })
                
                if llm_response and len(llm_response.strip()) > 50:
                    logger.info("‚úÖ R√©ponse LangChain accept√©e apr√®s r√©initialisation")
                    explanation = llm_response.strip()
                    llm_success = True
                else:
                    logger.warning(f"‚ö†Ô∏è R√©ponse toujours insuffisante apr√®s r√©initialisation")
                    
    except Exception as e:
        logger.error(f"‚ùå Erreur avec LangChain: {e}")
        import traceback
        traceback.print_exc()
        
    # Fallback seulement si le LLM a √©chou√©
    if not llm_success:
        logger.warning("‚ö†Ô∏è Utilisation du fallback car le LLM a √©chou√©")
    
    return {
        "plant": plant_names,
        "dosage": dosage,
        "prep": preparation,
        "image_url": image_url,
        "explanation": explanation,
        "contre_indications": contre_indications,
        "partie_utilisee": partie_utilisee,
        "composants": composants,
        "nom_local": nom_local_info if nom_local_info else f"Nom local: {nom_local}" if nom_local else ""
    }

def generate_chat_response(prompt: str):
    """
    G√©n√®re une r√©ponse pour le mode discussion en utilisant directement l'API HuggingFace Inference.
    Inclut un m√©canisme de fallback en cas d'√©chec de l'API.
    """
    global llm, chain
    
    print(f"Mode discussion: G√©n√©ration d'une r√©ponse pour: '{prompt}'")
    
    # Template pour les discussions g√©n√©rales sur la phytoth√©rapie africaine
    chat_template = """
    Tu es un expert en phytoth√©rapie africaine avec une approche tr√®s humaine et p√©dagogique.
    R√©ponds √† la question suivante de mani√®re concise, informative et bienveillante, en privil√©giant
    toujours la s√©curit√© du patient et l'exactitude des informations. Si la question concerne un traitement sp√©cifique ou des sympt√¥mes particuliers, sugg√®re poliment de passer en mode Consultation pour obtenir une recommandation plus d√©taill√©e et personnalis√©e.
    
    Question: {question}
    """
      # Dictionnaire de r√©ponses de secours pour les mots-cl√©s courants
    fallback_keywords = {
        "paludisme": "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu r√©aliser une analyse compl√®te de votre demande concernant le paludisme. Sans acc√®s au mod√®le linguistique principal, il m'est impossible d'√©tablir un diagnostic fiable. Le paludisme est une maladie grave n√©cessitant un avis m√©dical professionnel. Certaines plantes comme la Cryptolepia sanguinolenta sont traditionnellement utilis√©es, mais uniquement comme compl√©ment au traitement m√©dical. Pour explorer des options de phytoth√©rapie, utilisez le mode Consultation tout en consultant un m√©decin.",
        "malaria": "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu √©tablir de diagnostic pr√©cis concernant votre question sur la malaria (paludisme). Cette infection grave requiert un diagnostic m√©dical formel. Des plantes comme l'Artemisia annua sont utilis√©es traditionnellement, mais ne peuvent remplacer un traitement m√©dical appropri√©. Pour des informations structur√©es sur ces plantes, utilisez le mode Consultation, mais consultez imp√©rativement un m√©decin si vous suspectez cette maladie.",
        "fi√®vre": "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu analyser correctement la cause de votre fi√®vre. Ce sympt√¥me pouvant √™tre li√© √† de nombreuses pathologies, il serait imprudent de sugg√©rer un traitement sp√©cifique sans diagnostic m√©dical. Certaines plantes comme le Nauclea latifolia sont traditionnellement utilis√©es en phytoth√©rapie africaine pour soulager la fi√®vre, mais cela ne remplace jamais un avis m√©dical. Pour des informations structur√©es, utilisez le mode Consultation.",
        "t√™te": "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu analyser la nature de vos maux de t√™te, qui peuvent avoir diverses causes. Sans examen m√©dical, je ne peux recommander un traitement sp√©cifique. Des plantes comme le Securidaca longipedunculata sont utilis√©es traditionnellement, mais uniquement apr√®s avoir √©cart√© des causes plus graves n√©cessitant une intervention m√©dicale. Pour des informations plus structur√©es sur les approches traditionnelles, utilisez le mode Consultation.",
        "toux": "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu analyser la nature exacte de votre toux, sympt√¥me qui peut relever de diverses affections respiratoires. Sans examen m√©dical, il m'est impossible de d√©terminer sa cause. L'Eucalyptus globulus ou le gingembre sont traditionnellement utilis√©s en phytoth√©rapie africaine, mais une toux persistante n√©cessite un avis m√©dical. Pour des informations sur ces plantes, utilisez le mode Consultation tout en consultant un professionnel de sant√©.",
        "digestion": "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu analyser pr√©cis√©ment votre probl√®me digestif, qui peut avoir de nombreuses causes diff√©rentes. Sans diagnostic m√©dical, je ne peux recommander un traitement sp√©cifique. Le Moringa oleifera ou l'Aloe vera sont traditionnellement utilis√©s en phytoth√©rapie africaine, mais leur pertinence d√©pend de la cause exacte de votre trouble. Pour des informations plus structur√©es, utilisez le mode Consultation.",
        "insomnie": "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu analyser la cause de votre insomnie, qui peut √™tre li√©e √† divers facteurs physiologiques ou psychologiques. Sans √©valuation compl√®te, je ne peux recommander un traitement sp√©cifique. La passiflore ou la val√©riane sont utilis√©es traditionnellement, mais leur efficacit√© varie selon les causes. Pour des approches de phytoth√©rapie plus d√©taill√©es, utilisez le mode Consultation.",
        "stress": "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu analyser les facteurs pr√©cis de votre stress, qui n√©cessitent une √©valuation personnalis√©e. Des plantes comme le rooibos ou le basilic africain sont traditionnellement utilis√©es pour leurs propri√©t√©s apaisantes, mais leur pertinence d√©pend de votre situation sp√©cifique. Pour des approches de phytoth√©rapie plus d√©taill√©es et adapt√©es, je vous invite √† utiliser le mode Consultation.",
        "peau": "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu analyser pr√©cis√©ment votre probl√®me de peau, qui peut relever de nombreuses affections diff√©rentes. Sans diagnostic, je ne peux recommander un traitement sp√©cifique. L'Aloe vera ou le Centella asiatica sont traditionnellement utilis√©s en phytoth√©rapie africaine, mais leur pertinence d√©pend de la nature exacte de votre affection. Pour des informations plus adapt√©es, utilisez le mode Consultation."
    }
      # R√©ponse par d√©faut en cas d'√©chec
    default_response = "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu analyser votre demande de mani√®re fiable. Sans acc√®s au mod√®le linguistique principal, il m'est impossible de formuler une r√©ponse pr√©cise sur votre question m√©dicale. La phytoth√©rapie africaine propose diverses plantes m√©dicinales selon les sympt√¥mes sp√©cifiques. Pour une approche plus structur√©e et prudente, je vous invite √† d√©crire pr√©cis√©ment vos sympt√¥mes via le mode Consultation. Toutefois, gardez √† l'esprit que ces informations ne remplacent jamais l'avis d'un professionnel de sant√© qualifi√©."
      # Utilisations de r√©ponses enrichies sur la phytoth√©rapie africaine pour le fallback
    phyto_responses = [
        "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu analyser pr√©cis√©ment votre demande. La phytoth√©rapie africaine repose sur des traditions et connaissances ancestrales pr√©cieuses. Sans acc√®s au mod√®le principal, je ne peux vous offrir qu'une information g√©n√©rale : des plantes comme le Moringa oleifera, l'Artemisia annua ou la Cryptolepia sanguinolenta sont utilis√©es pour diverses affections. Pour des recommandations plus pr√©cises tout en gardant la prudence m√©dicale n√©cessaire, utilisez le mode Consultation.",
        "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu traiter votre requ√™te de mani√®re optimale. En Afrique, le savoir sur les plantes m√©dicinales est transmis de g√©n√©ration en g√©n√©ration, avec des plantes comme l'Acacia senegal ou le Tamarindus indica utilis√©es depuis des si√®cles. Sans acc√®s au mod√®le principal, je ne peux proposer de traitement sp√©cifique. Pour explorer des options de phytoth√©rapie, utilisez le mode Consultation tout en consultant un professionnel de sant√©.",
        "[‚ö†Ô∏è Mode assistance] Je n'ai pas pu analyser votre demande en profondeur. Les gu√©risseurs traditionnels africains poss√®dent un savoir immense sur les propri√©t√©s des plantes m√©dicinales, incluant non seulement les plantes elles-m√™mes mais aussi les m√©thodes de pr√©paration qui optimisent leur efficacit√©. Sans acc√®s au mod√®le principal, je vous invite √† utiliser le mode Consultation pour des recommandations plus structur√©es, tout en consultant un professionnel de sant√©."    ]      try:
        # üéØ PRIORIT√â: Utiliser LangChain avec le mod√®le Hugging Face pour le chat
        if chain is not None:
            logger.info("üöÄ PRIORIT√â Chat: Tentative d'utilisation de LangChain...")
            
            # Cr√©er un prompt simple pour le chat
            chat_prompt = f"Tu es un expert en phytoth√©rapie africaine. R√©ponds de mani√®re concise et bienveillante √† cette question: {prompt}"
            
            logger.info(f"üìù Envoi du prompt de chat √† LangChain: '{chat_prompt[:100]}...'")
            
            # Utiliser la cha√Æne existante avec des param√®tres adapt√©s au chat
            llm_response = chain.llm.invoke(chat_prompt)
            
            logger.info(f"üì® R√©ponse chat re√ßue de LangChain (longueur: {len(llm_response) if llm_response else 0})")
            
            if llm_response and len(llm_response.strip()) > 20:
                logger.info("‚úÖ R√©ponse chat LangChain accept√©e")
                return llm_response.strip()
            else:
                logger.warning(f"‚ö†Ô∏è R√©ponse chat LangChain trop courte: '{llm_response}'")
        else:
            logger.error("‚ùå LangChain non disponible pour le chat - chain est None")
            # Tenter de r√©initialiser
            llm = initialize_llm()
            if llm:
                chain = LLMChain(llm=llm, prompt=prompt)
                logger.info("üîß LLM r√©initialis√© pour le chat, nouvelle tentative...")
                
                chat_prompt = f"Tu es un expert en phytoth√©rapie africaine. R√©ponds de mani√®re concise et bienveillante √† cette question: {prompt}"
                llm_response = chain.llm.invoke(chat_prompt)
                
                if llm_response and len(llm_response.strip()) > 20:
                    logger.info("‚úÖ R√©ponse chat accept√©e apr√®s r√©initialisation")
                    return llm_response.strip()
        
        # Fallback : Utiliser la fonction generate_huggingface_response
        logger.warning("‚ö†Ô∏è Passage au fallback API directe pour le chat")
        formatted_prompt = chat_template.replace("{question}", prompt)
        logger.info("üîÑ Utilisation de l'API HuggingFace directement via requests...")
        
        response = generate_huggingface_response(
            prompt=formatted_prompt,
            api_key=HF_API_KEY,
            model_id="google/flan-t5-base",  
            max_length=200,
            temperature=0.7
        )
        
        # V√©rifier si la r√©ponse est valide
        if response and len(response.strip()) > 20:
            print(f"R√©ponse API directe g√©n√©r√©e avec succ√®s (longueur: {len(response)})")
            return response.strip()
        else:
            print("La r√©ponse est vide ou trop courte, utilisation du fallback final")
    except Exception as e:
        print(f"Erreur lors de l'appel aux mod√®les: {e}")
        import traceback
        traceback.print_exc()
        print("Passage au fallback apr√®s erreur")
        
    # Fallback: recherche de mots-cl√©s dans la question si l'API √©choue
    print("Utilisation du syst√®me de fallback bas√© sur les mots-cl√©s")
    prompt_lower = prompt.lower()
    
    # V√©rifier les mots-cl√©s sp√©cifiques
    for keyword, response in fallback_keywords.items():
        if keyword in prompt_lower:
            return response
      # Si la question est une salutation ou g√©n√©rale
    if any(word in prompt_lower for word in ["bonjour", "salut", "comment", "ca va", "√ßa va", "hello"]):
        return "[‚ö†Ô∏è Mode assistance] Bonjour‚ÄØ! Je suis l'assistant aiBotanik, sp√©cialiste en phytoth√©rapie africaine. Actuellement, j'√©prouve une difficult√© technique qui limite l'acc√®s √† mes ressources d'IA. Cependant, je reste √† votre disposition pour vous fournir des informations d√©taill√©es sur les plantes m√©dicinales africaines ou pour vous orienter vers des recommandations personnalis√©es en mode Consultation."
      # Si la question parle de plantes ou de traitement mais sans mot-cl√© sp√©cifique
    if any(word in prompt_lower for word in ["plante", "herbe", "traitement", "rem√®de", "soigner", "traiter", "phyto", "m√©decine", "traditionnelle"]):
        # Choisir une r√©ponse enrichie al√©atoirement
        import random
        return random.choice(phyto_responses)
    
    # R√©ponse g√©n√©rale si aucun mot-cl√© n'est trouv√©
    return default_response

def clean_null_values(text):
    """
    Nettoie le texte en rempla√ßant les valeurs NULL par des informations plus utiles
    """
    if not text:
        return ""
    
    # Remplacer les formes NULL simples
    replacements = [
        ("NULL", "non sp√©cifi√©"),
        ("null", "non sp√©cifi√©"),
        ("Null", "non sp√©cifi√©")
    ]
    
    result = text
    for old, new in replacements:
        result = result.replace(old, new)
    
    return result
