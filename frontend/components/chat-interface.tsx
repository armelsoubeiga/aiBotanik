"use client"

import React, { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Mic, Send, ArrowLeft, Bot, User, MessageCircle, Stethoscope, Loader2, Save, LogIn, PlusCircle } from "lucide-react"
import { PlantRecommendationCard, PlantRecommendation } from "./plant-recommendation"
import { AuthRequiredModal } from "./auth-required-modal"
import { LoginModal } from "./login-modal"
import { authService } from "@/services/auth-service"
import { consultationService } from "@/services/consultation-service"
// Types import√©s avec des alias pour √©viter les conflits
import type { Message as ServiceMessage, Consultation as ServiceConsultation } from "@/services/consultation-service"
// Import du service et helper pour les conversations unifi√©es
import { conversationUnifiedService } from "@/services/conversation-unified-service"
import { saveUnifiedConversation } from "@/services/conversation-unified-helper"
// Configuration des URLs backend
import { API_URL, BASE_URL } from "@/lib/config"

interface ChatInterfaceProps {
  onBack?: () => void
  onStartChat?: () => void
  isWelcome?: boolean
  isAuthenticated?: boolean
  onAuthChange?: (isAuth: boolean) => void
  consultationId?: string  // ID de la consultation √† charger depuis l'historique
  currentConversation?: any  // Conversation en cours pour la persistance
  onConversationChange?: (conversation: any) => void  // Pour mettre √† jour la conversation en cours
}

interface Message {
  id: string
  content: string
  sender: "user" | "bot"
  timestamp: Date
  recommendation?: PlantRecommendation
}

export function ChatInterface({ 
  onBack, 
  onStartChat, 
  isWelcome = false,
  isAuthenticated: propIsAuthenticated,
  onAuthChange,
  consultationId, // ID de la consultation √† charger depuis l'historique
  currentConversation, // Conversation en cours pour la persistance
  onConversationChange // Pour mettre √† jour la conversation en cours
}: ChatInterfaceProps) {
  const [messages, setMessages] = useState<Message[]>([])
  const [inputValue, setInputValue] = useState("")
  const [isListening, setIsListening] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false)
  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false)
  const [pendingSaveConversation, setPendingSaveConversation] = useState(false)
  const [pendingMessage, setPendingMessage] = useState("")
  // Utiliser l'√©tat fourni par les props si disponible, sinon utiliser un √©tat local
  const [localIsAuthenticated, setLocalIsAuthenticated] = useState(false)
  const isAuthenticated = propIsAuthenticated !== undefined ? propIsAuthenticated : localIsAuthenticated
  const [userChooseContinueWithoutLogin, setUserChooseContinueWithoutLogin] = useState(false) // Nouvel √©tat pour suivre si l'utilisateur a choisi de continuer sans connexion
  // D√©finir le mode discussion comme mode par d√©faut
  const [chatMode, setChatMode] = useState<"discussion" | "consultation">("discussion")
  // Tracker les tentatives pour le syst√®me de fallback robuste
  const [attemptCount, setAttemptCount] = useState(1)

  const welcomeText = `Bonjour ! Je suis aiBotanik, votre assistant sp√©cialis√© en phytoth√©rapie africaine.

D√©crivez vos sympt√¥mes et je vous aiderai √† trouver des rem√®des naturels adapt√©s.

Comment puis-je vous aider ?`

  // La sauvegarde se fait automatiquement lorsque l'utilisateur est connect√©
  // apr√®s l'envoi d'un message et la r√©ponse du bot
  
  // R√©f√©rence √† la consultation actuelle
  const [currentConsultation, setCurrentConsultation] = useState<ServiceConsultation | null>(null);
  const [isHistoricalConsultation, setIsHistoricalConsultation] = useState(false);
    // Effet pour cr√©er une nouvelle consultation au d√©marrage si l'utilisateur est authentifi√©
  useEffect(() => {
    let isMounted = true; // Flag pour √©viter les mises √† jour apr√®s d√©montage
    
    const initializeConsultation = async () => {
      // D√âSACTIV√â: Ne pas cr√©er automatiquement de consultation pour chaque nouveau chat
      // Les conversations ne sont sauvegard√©es que lors d'actions explicites selon la logique m√©tier
      // 
      // Cette fonction √©tait responsable de la cr√©ation automatique d'entr√©es de consultation
      // qui interf√®re avec la logique m√©tier o√π les messages sont stock√©s temporairement
      // et ne sont persist√©s que lors du bouton +, d√©connexion, ou fermeture navigateur
      
      console.log(`üîç Initialisation consultation d√©sactiv√©e pour respecter la logique m√©tier`, {
        isAuthenticated,
        messagesLength: messages.length,
        currentConsultation: currentConsultation?.id,
        isHistoricalConsultation
      });
    };
    
    initializeConsultation();
    
    // Nettoyer l'effet lors du d√©montage
    return () => {
      isMounted = false;
    };
  }, [isAuthenticated, messages.length, currentConsultation, isHistoricalConsultation]);
  
  // √âcouteur d'√©v√©nement pour sauvegarder la conversation avant d√©connexion
  useEffect(() => {
    // Fonction pour g√©rer la sauvegarde avant d√©connexion
    const handleBeforeUnload = async () => {
      if (isAuthenticated && messages.length >= 4) {
        console.log("D√©tection de fermeture de page ou d√©connexion, sauvegarde de la conversation...");
        // Appel direct √† l'API pour √©viter les probl√®mes de promesses non r√©solues
        await saveConversationBeforeLogout();
      }
    };

    // Fonction pour g√©rer la d√©connexion imminente
    const handleLogoutEvent = async (event: Event) => {
      if (isAuthenticated && messages.length >= 4) {
        console.log("D√©tection de d√©connexion imminente via √©v√©nement personnalis√©, sauvegarde de la conversation...");
        await saveConversationBeforeLogout();
      }
    };

    // √âcouter l'√©v√©nement personnalis√© de d√©connexion imminente
    window.addEventListener('beforeunload', handleBeforeUnload);
    window.addEventListener('aiBotanikLogout', handleLogoutEvent);
    
    // Nettoyage des √©couteurs lors du d√©montage
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      window.removeEventListener('aiBotanikLogout', handleLogoutEvent);
    };
  }, [isAuthenticated, messages]);  // Effet pour la sauvegarde automatique des nouveaux messages dans les consultations existantes
  useEffect(() => {
    // Fonction pour sauvegarder automatiquement les nouveaux messages
    const autoSaveNewMessages = async () => {
      console.log(`üîç Diagnostic sauvegarde automatique:`, {
        isAuthenticated,
        userChooseContinueWithoutLogin,
        currentConsultationId: currentConsultation?.id,
        isHistoricalConsultation,
        messagesLength: messages.length
      });
      
      // IMPORTANTE: La sauvegarde automatique ne doit se faire QUE pour les consultations historiques
      // Les nouvelles conversations utilisent un stockage temporaire et ne sont sauvegard√©es
      // que lors d'actions explicites (bouton +, d√©connexion, fermeture navigateur)
      
      // Conditions pour d√©clencher la sauvegarde automatique :
      // 1. Utilisateur authentifi√©
      // 2. Pas en mode "continuer sans connexion"
      // 3. Il s'agit d'une consultation historique (isHistoricalConsultation = true)
      // 4. Il y a une consultation existante
      // 5. Il y a des messages
      // 6. Le dernier message n'est pas un message utilisateur seul (on attend la paire user+bot)
      if (
        isAuthenticated && 
        !userChooseContinueWithoutLogin && 
        isHistoricalConsultation && // AJOUT: Seulement pour les consultations historiques
        currentConsultation?.id && 
        messages.length > 0 &&
        messages.length >= 2 // Au minimum une paire user+bot
      ) {
        const lastMessage = messages[messages.length - 1];
        
        // Ne sauvegarder que si le dernier message est du bot (fin d'un √©change complet)
        if (lastMessage.sender === "bot") {
          console.log(`üîÑ Sauvegarde automatique d√©clench√©e - Consultation ${currentConsultation.id} - Message bot re√ßu`);
          
          try {
            // Identifier les nouveaux messages qui ne sont pas encore sauvegard√©s
            const existingMessageIds = new Set(
              (currentConsultation.messages || [])
                .filter(m => m.id)
                .map(m => m.id?.toString())
            );
            
            // Prendre les 2 derniers messages (user + bot)
            const recentMessages = messages.slice(-2);
            const messagesToSave = recentMessages
              .filter(m => !existingMessageIds.has(m.id?.toString()))
              .map(m => ({
                content: m.content,
                sender: m.sender,
                recommendation: m.recommendation
              }));
              if (messagesToSave.length > 0) {
              console.log(`üîÑ Sauvegarde automatique - ${messagesToSave.length} nouveaux messages √† sauvegarder`);
              
              // Distinguer entre consultation historique (table conversations) et nouvelle consultation (tables consultation/message)
              if (isHistoricalConsultation && currentConsultation.id) {
                // CAS 1: Consultation historique charg√©e depuis la table conversations
                // Utiliser le service unifi√© pour ajouter √† une conversation existante
                console.log(`üîÑ Sauvegarde automatique - Consultation historique d√©tect√©e, utilisation du service unifi√©`);
                
                for (const message of messagesToSave) {
                  try {
                    console.log(`üîÑ Sauvegarde automatique - Ajout du message ${message.sender} √† la conversation unifi√©e ${currentConsultation.id}`);
                    
                    const savedMessage = await conversationUnifiedService.addMessageToConversation(
                      currentConsultation.id, 
                      {
                        content: message.content,
                        sender: message.sender,
                        recommendation: message.recommendation
                      }
                    );
                    
                    if (!savedMessage) {
                      throw new Error("√âchec de la sauvegarde du message");
                    }
                    
                    console.log(`‚úÖ Sauvegarde automatique - Message ${message.sender} sauvegard√© dans conversation unifi√©e`);
                  } catch (error) {
                    console.error(`‚ùå Sauvegarde automatique - Erreur lors de la sauvegarde du message ${message.sender}:`, error);
                  }
                }
              } else {
                // CAS 2: Nouvelle consultation en cours (stockage interm√©diaire)
                // Utiliser le service consultation traditionnel pour le stockage interm√©diaire
                console.log(`üîÑ Sauvegarde automatique - Nouvelle consultation d√©tect√©e, utilisation du stockage interm√©diaire`);
                
                for (const message of messagesToSave) {
                  try {
                    console.log(`üîÑ Sauvegarde automatique - Ajout du message ${message.sender} au stockage interm√©diaire`);
                    
                    // Utiliser consultationService pour sauvegarder dans les tables consultation/message
                    const savedMessage = await consultationService.addMessage(
                      currentConsultation.id, 
                      {
                        content: message.content,
                        sender: message.sender,
                        recommendation: message.recommendation
                      }
                    );
                    
                    if (!savedMessage) {
                      throw new Error("√âchec de la sauvegarde du message");
                    }
                    
                    console.log(`‚úÖ Sauvegarde automatique - Message ${message.sender} sauvegard√© dans stockage interm√©diaire`);
                  } catch (error) {
                    console.error(`‚ùå Sauvegarde automatique - Erreur lors de la sauvegarde du message ${message.sender}:`, error);
                  }
                }
              }
              
              console.log(`‚úÖ Sauvegarde automatique termin√©e - ${messagesToSave.length} messages sauvegard√©s dans la consultation ${currentConsultation.id}`);
            } else {
              console.log("üîÑ Sauvegarde automatique - Aucun nouveau message √† sauvegarder");
            }
          } catch (error) {
            console.error("‚ùå Sauvegarde automatique - Erreur:", error);
          }
        } else {
          console.log("üîÑ Sauvegarde automatique - En attente de la r√©ponse du bot");
        }
      }
    };
    
    // D√©clencher la sauvegarde avec un petit d√©lai pour s'assurer que l'√©tat est stabilis√©
    const timeoutId = setTimeout(autoSaveNewMessages, 100);
    
    return () => clearTimeout(timeoutId);
  }, [
    messages.length, // Se d√©clenche quand le nombre de messages change
    isAuthenticated, 
    userChooseContinueWithoutLogin, 
    currentConsultation?.id
  ]);
  
  // Fonction sp√©cifique pour sauvegarder la conversation juste avant d√©connexion
  const saveConversationBeforeLogout = async () => {
    if (!isAuthenticated || messages.length < 4) {
      return false;
    }
    
    const hasUserMessage = messages.some(m => m.sender === "user");
    const hasBotMessage = messages.some(m => m.sender === "bot");
    
    if (!hasUserMessage || !hasBotMessage) {
      console.log("saveConversationBeforeLogout: Conversation incompl√®te, sauvegarde ignor√©e");
      return false;
    }
    
    try {
      console.log("saveConversationBeforeLogout: Tentative de sauvegarde d'urgence avant d√©connexion");
      
      // Obtenir le token avant qu'il ne soit invalid√©
      const token = authService.getToken();
      if (!token) {
        console.error("saveConversationBeforeLogout: Pas de token disponible");
        return false;
      }
      
      // Utiliser la fonction de sauvegarde unifi√©e pour sauvegarder la conversation
      const conversationId = await saveUnifiedConversation(messages, chatMode);
      
      if (conversationId) {
        console.log(`saveConversationBeforeLogout: Conversation sauvegard√©e avec succ√®s dans la table unifi√©e, ID: ${conversationId}`);
        return true;
      }
      
      // En cas d'√©chec de la sauvegarde unifi√©e, continuer avec la sauvegarde traditionnelle
      console.log("saveConversationBeforeLogout: √âchec de la sauvegarde unifi√©e, tentative avec l'ancienne m√©thode");
      
      // G√©n√©rer un titre bas√© sur le premier message utilisateur
      const firstUserMessage = messages.find(m => m.sender === "user");
      const title = firstUserMessage 
        ? firstUserMessage.content.substring(0, 50) + (firstUserMessage.content.length > 50 ? "..." : "") 
        : "Nouvelle session";
      
      // Appel direct √† l'API pour √©viter les probl√®mes de promesses
      const messagesToSend = messages.map(m => {
        // S'assurer que les recommandations sont correctement format√©es
        let processedRecommendation = m.recommendation;
        
        if (processedRecommendation) {
          if (typeof processedRecommendation === 'string') {
            try {
              processedRecommendation = JSON.parse(processedRecommendation);
            } catch (error) {
              console.warn("saveConversationBeforeLogout: Erreur lors du parsing de la recommandation", error);
            }
          }
          
          // Assurer que tous les champs requis sont pr√©sents
          if (typeof processedRecommendation === 'object' && processedRecommendation !== null) {
            if (!processedRecommendation.plant) processedRecommendation.plant = "Plante m√©dicinale";
            if (!processedRecommendation.dosage) processedRecommendation.dosage = "Dosage √† d√©terminer selon le cas";
            if (!processedRecommendation.prep) processedRecommendation.prep = "Pr√©paration √† adapter selon les besoins";
            if (!processedRecommendation.image_url) processedRecommendation.image_url = "";
            if (!processedRecommendation.explanation) processedRecommendation.explanation = "Pas de d√©tails disponibles";
            if (!processedRecommendation.contre_indications) processedRecommendation.contre_indications = "Consultez un professionnel de sant√© avant utilisation";
            if (!processedRecommendation.partie_utilisee) processedRecommendation.partie_utilisee = "Diverses parties de la plante";
            if (!processedRecommendation.composants) processedRecommendation.composants = "Composants actifs √† d√©terminer";
            if (!processedRecommendation.nom_local) processedRecommendation.nom_local = processedRecommendation.plant || "Nom local non disponible";
          }
        }
        
        return {
          content: m.content,
          sender: m.sender,
          recommendation: processedRecommendation
        };
      });
      
      // Si nous avons d√©j√† une consultation, mettre √† jour avec les nouveaux messages
      if (currentConsultation && currentConsultation.id) {
        console.log(`saveConversationBeforeLogout: Mise √† jour de la consultation existante ${currentConsultation.id}`);
          // Appel direct √† l'API pour la mise √† jour
        const response = await fetch(`${API_URL}/api/consultations/${currentConsultation.id}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`
          },
          body: JSON.stringify({
            title,
            type: chatMode,
            messages: messagesToSend
          }),
        });
        
        if (!response.ok) {
          console.error(`saveConversationBeforeLogout: Erreur lors de la mise √† jour de la consultation ${currentConsultation.id}`);
          return false;
        }
        
        console.log(`saveConversationBeforeLogout: Consultation ${currentConsultation.id} mise √† jour avec succ√®s`);
        return true;
      } 
      // Sinon, cr√©er une nouvelle consultation
      else {        console.log("saveConversationBeforeLogout: Cr√©ation d'une nouvelle consultation d'urgence");
        // Appel direct √† l'API pour la cr√©ation
        console.log("saveConversationBeforeLogout: Envoi d'une requ√™te de cr√©ation de consultation avec", 
          messagesToSend.length, "messages et token:", token.substring(0, 15) + "...");
        const response = await fetch(`${API_URL}/api/consultations`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`
          },
          body: JSON.stringify({
            title,
            type: chatMode,
            messages: messagesToSend
          }),
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error("saveConversationBeforeLogout: Erreur lors de la cr√©ation d'une nouvelle consultation:", 
            response.status, errorText);
          return false;
        }
        
        const newConsultation = await response.json();
        console.log("saveConversationBeforeLogout: Nouvelle consultation cr√©√©e avec succ√®s avant d√©connexion, ID:", 
          newConsultation.id);
        return true;
      }
    } catch (error) {
      console.error("saveConversationBeforeLogout: Erreur lors de la sauvegarde d'urgence:", error);
      return false;
    }
  };
  
  // Cr√©er une nouvelle entr√©e d'historique contenant toute la session
  const createNewConsultation = async () => {
    if (!isAuthenticated) {
      console.log("createNewConsultation: Non authentifi√©, impossible de cr√©er une entr√©e d'historique");
      return null;
    }
    
    // V√©rifier si la session est valide pour la sauvegarde
    // Accepter les sessions avec au moins 4 messages (deux √©changes user-bot complets)
    const hasUserMessage = messages.some(m => m.sender === "user");
    const hasBotMessage = messages.some(m => m.sender === "bot");
    
    if (messages.length < 4 || !hasUserMessage || !hasBotMessage) {
      console.log(`createNewConsultation: Impossible de cr√©er une entr√©e d'historique: session avec seulement ${messages.length} messages (minimum 4 requis) ou √©change incomplet`);
      return null;
    }
    
    // G√©n√©rer un titre bas√© sur le premier message de l'utilisateur
    const firstUserMessage = messages.find(m => m.sender === "user");
    const title = firstUserMessage 
      ? firstUserMessage.content.substring(0, 50) + (firstUserMessage.content.length > 50 ? "..." : "") 
      : "Nouvelle session";
    
    try {
      console.log("createNewConsultation: Tentative de cr√©ation d'une nouvelle entr√©e d'historique pour la session compl√®te:", {
        title,
        type: chatMode,
        messagesCount: messages.length,
        token: authService.getToken()?.substring(0, 10) + "..."
      });
      
      // Cr√©er des copies des messages sans r√©f√©rences probl√©matiques et avec tous les champs n√©cessaires
      const messagesToSend = messages.map(m => {
        // Si le message contient une recommandation, v√©rifier qu'elle est correctement format√©e
        let processedRecommendation = undefined;
        if (m.recommendation) {
          try {
            // Faire une copie profonde de la recommandation
            processedRecommendation = JSON.parse(JSON.stringify(m.recommendation));
            
            // V√©rifier et compl√©ter chaque champ individuellement pour √©viter les erreurs TypeScript
            // et garantir une restauration fid√®le de la session
            if (!processedRecommendation.plant) {
              processedRecommendation.plant = "Plante non sp√©cifi√©e";
              console.log(`Recommandation: champ 'plant' manquant, valeur par d√©faut ajout√©e`);
            }
            if (!processedRecommendation.dosage) {
              processedRecommendation.dosage = "Dosage non sp√©cifi√©";
              console.log(`Recommandation: champ 'dosage' manquant, valeur par d√©faut ajout√©e`);
            }
            if (!processedRecommendation.prep) {
              processedRecommendation.prep = "Pr√©paration non sp√©cifi√©e";
              console.log(`Recommandation: champ 'prep' manquant, valeur par d√©faut ajout√©e`);
            }
            if (!processedRecommendation.image_url) {
              processedRecommendation.image_url = "";
            }
            if (!processedRecommendation.explanation) {
              processedRecommendation.explanation = "";
              console.log(`Recommandation: champ 'explanation' manquant, valeur par d√©faut ajout√©e`);
            }
            if (!processedRecommendation.contre_indications) {
              processedRecommendation.contre_indications = "Aucune contre-indication connue";
            }
            if (!processedRecommendation.partie_utilisee) {
              processedRecommendation.partie_utilisee = "Non sp√©cifi√©";
            }
            if (!processedRecommendation.composants) {
              processedRecommendation.composants = "Non sp√©cifi√©";
            }
            if (!processedRecommendation.nom_local) {
              processedRecommendation.nom_local = "";
            }
            
            console.log(`Recommandation du message trait√©e et compl√©t√©e pour la sauvegarde:`, 
              processedRecommendation.plant);
          } catch (error) {
            console.error("Erreur lors du traitement de la recommandation:", error);
          }
        }
        
        return {
          content: m.content,
          sender: m.sender,
          recommendation: processedRecommendation
        };
      });
      
      console.log("createNewConsultation: Envoi de la requ√™te au service...");
      const newConsultation = await consultationService.createConsultation({
        title,
        type: chatMode,
        messages: messagesToSend
      });
      
      if (newConsultation) {
        console.log("createNewConsultation: Nouvelle entr√©e d'historique cr√©√©e avec succ√®s:", {
          id: newConsultation.id,
          title: newConsultation.title,
          type: newConsultation.type,
          messageCount: newConsultation.messages?.length || messagesToSend.length
        });
        setCurrentConsultation(newConsultation);
        return newConsultation;
      } else {
        console.error("createNewConsultation: √âchec de cr√©ation de la consultation, aucun objet retourn√©");
      }
    } catch (error) {
      console.error("createNewConsultation: Erreur lors de la cr√©ation de l'entr√©e d'historique:", error);
    }
    
    return null;
  };
  
  // Fonction am√©lior√©e pour sauvegarder les sessions de conversation compl√®tes
  const saveConversation = async () => {
    console.log("Tentative de sauvegarde de session compl√®te, authentifi√©:", isAuthenticated);
    
    if (!isAuthenticated) {
      console.log("Non authentifi√©, sauvegarde impossible");
      return false;
    }
    
    // V√©rifier si la conversation est valide pour la sauvegarde
    const hasUserMessage = messages.some(m => m.sender === "user");
    const hasBotMessage = messages.some(m => m.sender === "bot");
    
    // Ne sauvegarder que les sessions avec au moins 4 messages (deux √©changes utilisateur-bot)
    if (messages.length < 4 || !hasUserMessage || !hasBotMessage) {
      console.log(`Session ignor√©e car moins de 4 messages (${messages.length}) ou pas d'√©change user-bot`);
      return false;
    }
    
    try {
      setIsLoading(true);
      
      // G√©n√©rer un titre bas√© sur le premier message de l'utilisateur
      const firstUserMessage = messages.find(m => m.sender === "user");
      const title = firstUserMessage 
        ? firstUserMessage.content.substring(0, 50) + (firstUserMessage.content.length > 50 ? "..." : "") 
        : "Nouvelle session";
      
      // Si nous avons d√©j√† une consultation, mettre √† jour avec tous les nouveaux messages
      if (currentConsultation && currentConsultation.id) {
        console.log(`Mise √† jour de la session historique existante ${currentConsultation.id}`);
        
        // Trouver les nouveaux messages qui n'ont pas encore √©t√© sauvegard√©s
        const existingMessageIds = new Set(
          (currentConsultation.messages || [])
            .filter(m => m.id)
            .map(m => m.id)
        );
        
        // Nouveaux messages √† ajouter √† la session (ceux qui n'ont pas d'ID dans existingMessageIds)
        const newMessages = messages
          .filter(m => !m.id || !existingMessageIds.has(m.id))
          .map(m => {
            // S'assurer que toutes les recommandations ont les champs n√©cessaires pour une restauration fid√®le
            let processedRecommendation = undefined;
            if (m.recommendation) {
              try {
                // Faire une copie profonde de la recommandation
                processedRecommendation = JSON.parse(JSON.stringify(m.recommendation));
                
                // V√©rifier et compl√©ter les champs individuellement pour √©viter les erreurs TypeScript
                if (!processedRecommendation.plant) {
                  processedRecommendation.plant = "Plante non sp√©cifi√©e";
                }
                if (!processedRecommendation.dosage) {
                  processedRecommendation.dosage = "Dosage non sp√©cifi√©";
                }
                if (!processedRecommendation.prep) {
                  processedRecommendation.prep = "Pr√©paration non sp√©cifi√©e";
                }
                if (!processedRecommendation.image_url) {
                  processedRecommendation.image_url = "";
                }
                if (!processedRecommendation.explanation) {
                  processedRecommendation.explanation = "";
                }
                if (!processedRecommendation.contre_indications) {
                  processedRecommendation.contre_indications = "Aucune contre-indication connue";
                }
                if (!processedRecommendation.partie_utilisee) {
                  processedRecommendation.partie_utilisee = "Non sp√©cifi√©";
                }
                if (!processedRecommendation.composants) {
                  processedRecommendation.composants = "Non sp√©cifi√©";
                }
                if (!processedRecommendation.nom_local) {
                  processedRecommendation.nom_local = "";
                }
              } catch (error) {
                console.error("Erreur lors du traitement de la recommandation:", error);
              }
            }
            
            return {
              content: m.content,
              sender: m.sender,
              recommendation: processedRecommendation
            };
          });
        
        if (newMessages.length > 0) {
          console.log(`Ajout de ${newMessages.length} nouveaux messages √† la session historique ${currentConsultation.id}`);
          
          // Ajouter chaque nouveau message √† la session existante
          let success = true;
          for (const message of newMessages) {
            try {
              await consultationService.addMessage(currentConsultation.id, message);
            } catch (error) {
              console.error("Erreur lors de l'ajout d'un message √† la session:", error);
              success = false;
              break;
            }
          }
          
          // Mettre √† jour les autres champs de la session si n√©cessaire
          if (success) {
            await consultationService.updateConsultation(currentConsultation.id, {
              title,
              type: chatMode
            });
            
            console.log(`Session historique ${currentConsultation.id} mise √† jour avec succ√®s`);
            return true;
          }
        } else {
          console.log("Aucun nouveau message √† ajouter √† la session historique");
          return true;
        }
      } else {
        // Cr√©er une nouvelle entr√©e d'historique contenant toute la session
        console.log("Cr√©ation d'une nouvelle entr√©e d'historique pour toute la session");
        const result = await createNewConsultation();
        return !!result;
      }
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de la session compl√®te:", error);
      return false;
    } finally {
      setIsLoading(false);
    }
    
    return false;
  }
  
  const handleLogin = () => {
    // La fermeture de la modale d'authentification est d√©sormais g√©r√©e par AlertDialog lui-m√™me via onOpenChange=onClose
    // On ouvre simplement la modale de connexion - le setTimeout est g√©r√© dans AuthRequiredModal
    setIsLoginModalOpen(true)
  }
  
  const handleLoginSuccess = () => {
    console.log("Connexion r√©ussie - Message en attente:", pendingMessage)
    
    // L'utilisateur est maintenant connect√© - forcer la mise √† jour
    setIsAuthenticated(prev => {
      console.log("Mise √† jour de isAuthenticated √† true (√©tat pr√©c√©dent:", prev, ")")
      return true
    })
    setIsLoginModalOpen(false)
    
    // L'utilisateur n'est plus dans le mode "continuer sans connexion"
    setUserChooseContinueWithoutLogin(false)
    
    // Sauvegarder la conversation actuelle maintenant que l'utilisateur est connect√©
    if (messages.length > 0) {
      // Attendre que la modale soit ferm√©e avant de sauvegarder
      setTimeout(() => {
        saveConversation()
        console.log("Conversation sauvegard√©e apr√®s connexion")
      }, 500)
    }
    
    // S'il y a un message en attente, l'envoyer apr√®s la connexion
    if (pendingMessage) {
      const savedMessage = pendingMessage
      setPendingMessage("")
      
      // Cr√©er et envoyer directement le message utilisateur et sa r√©ponse
      // Nous utilisons un d√©lai pour s'assurer que isAuthenticated est bien pris en compte partout
      setTimeout(() => {
        // Maintenant que isAuthenticated est √† true, cr√©er le message utilisateur
        const userMessage: Message = {
          id: Date.now().toString(),
          content: savedMessage,
          sender: "user",
          timestamp: new Date(),
        }
        
        // Ajouter le message
        setMessages(prev => [...prev, userMessage])
        
        // Puis traiter la r√©ponse
        processMessageResponse(savedMessage)
        
        console.log("Message envoy√© apr√®s connexion:", savedMessage)
      }, 300)
    }
  }
  
  const handleContinueWithoutLogin = () => {
    // La fermeture de la modale est d√©sormais g√©r√©e par le composant AlertDialog lui-m√™me via onOpenChange
    // Ne pas appeler setIsAuthModalOpen(false) ici pour √©viter la boucle infinie
    
    // Indiquer qu'on ne veut pas sauvegarder
    setPendingSaveConversation(false)
    
    // Marquer que l'utilisateur a choisi de continuer sans connexion
    setUserChooseContinueWithoutLogin(true)
    console.log("Utilisateur a choisi de continuer sans connexion")
    
    // Traiter le message en attente s'il y en a un
    if (pendingMessage) {
      const savedMessage = pendingMessage
      
      // R√©initialiser l'√©tat du message en attente
      setPendingMessage("")
      
      // Utiliser un setTimeout pour √©viter les mises √† jour d'√©tat multiples dans le m√™me cycle de rendu
      setTimeout(() => {
        // Ajouter manuellement le message utilisateur
        const userMessage: Message = {
          id: Date.now().toString(),
          content: savedMessage,
          sender: "user",
          timestamp: new Date(),
        }
        
        setInputValue("") // Effacer le champ de saisie
        setMessages(prev => [...prev, userMessage]) // Ajouter le message au chat
        
        // Appeler la fonction qui g√®re la r√©ponse du bot sans sauvegarde
        processMessageResponse(savedMessage)
      }, 100)
    } else {
      console.log("Conversation continue sans sauvegarde")
    }
  }

  const handleSendMessage = async (e?: React.FormEvent) => {
    // Emp√™cher le comportement par d√©faut du formulaire si l'√©v√©nement est fourni
    if (e) e.preventDefault();
    
    if (!inputValue.trim()) return
    
    // √âviter les actions si nous sommes d√©j√† en train de charger
    if (isLoading) return;
    
    // Sauvegarder le message courant avant tout traitement
    const currentMessage = inputValue;
    
    // Effacer imm√©diatement le champ de saisie pour une meilleure r√©activit√© de l'interface
    setInputValue("");
    
    // Si l'utilisateur n'est pas connect√© et n'a pas d√©j√† choisi de continuer sans connexion
    if (!isAuthenticated && !userChooseContinueWithoutLogin) {
      // Stocker le message avant d'afficher la modale
      setPendingMessage(currentMessage);
      
      // Utiliser un setTimeout pour s'assurer que pendingMessage est bien d√©fini avant d'ouvrir la modale
      setTimeout(() => {
        setIsAuthModalOpen(true);
      }, 10);
      return;
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      content: currentMessage,
      sender: "user",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])    // Traiter la r√©ponse au message
    await processMessageResponse(currentMessage)
    
    // La sauvegarde automatique se fait maintenant via un effet qui surveille les changements de messages
    // Cela √©vite les probl√®mes de synchronisation avec les mises √† jour d'√©tat asynchrones
  }

  // Fonction pour traiter la r√©ponse √† un message sans la logique de sauvegarde
  const processMessageResponse = async (messageText: string) => {
    // Si c'est en mode consultation, appeler l'API backend
    if (chatMode === "consultation") {
      setIsLoading(true);
      
      try {
        console.log("Envoi de la requ√™te au backend avec les sympt√¥mes:", messageText);
        
        // V√©rifier si la requ√™te est vide
        if (!messageText.trim()) {
          throw new Error("Veuillez d√©crire vos sympt√¥mes avant de demander une consultation");
        }        // Utiliser l'URL configur√©e pour le backend
        const response = await fetch(`${BASE_URL}/recommend`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ 
            symptoms: messageText,
            attempt_count: attemptCount 
          }),
          // Ajouter mode CORS pour s'assurer que les requ√™tes sont bien envoy√©es
          mode: "cors",
          cache: "no-cache",
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error("R√©ponse du serveur non valide:", response.status, errorText);
          throw new Error(`Erreur: ${response.status} - ${errorText}`);
        }
        
        const recommendation: PlantRecommendation = await response.json();
        console.log("R√©ponse re√ßue du backend:", recommendation);
        
        // V√©rifier si la r√©ponse est valide et contient les donn√©es n√©cessaires
        if (!recommendation) {
          throw new Error("R√©ponse vide du serveur");
        }
        
        if (!recommendation.plant) {
          console.warn("‚ö†Ô∏è Aucune plante sp√©cifi√©e dans la r√©ponse");
          recommendation.plant = "plante m√©dicinale";
        }
        
        if (!recommendation.explanation) {
          console.warn("‚ö†Ô∏è L'explication est vide ou manquante dans la r√©ponse");
          // Cr√©er une explication minimale pour √©viter les erreurs d'affichage
          recommendation.explanation = `
          Diagnostic possible
          
          D'apr√®s vos sympt√¥mes, un rem√®de √† base de ${recommendation.plant} pourrait vous aider.
          
          R√©sum√© de traitement
          
          Veuillez suivre les instructions de pr√©paration et dosage indiqu√©es ci-dessous.
          `;
        }
        
        // S'assurer que tous les champs requis sont pr√©sents pour une restauration future identique
        // Des valeurs par d√©faut significatives garantissent un affichage coh√©rent dans l'historique
        if (!recommendation.dosage) recommendation.dosage = "Dosage √† d√©terminer selon le cas";
        if (!recommendation.prep) recommendation.prep = "Pr√©paration √† adapter selon les besoins";
        if (!recommendation.image_url) recommendation.image_url = "";
        if (!recommendation.explanation) recommendation.explanation = "Pas de d√©tails disponibles";
        if (!recommendation.contre_indications) recommendation.contre_indications = "Consultez un professionnel de sant√© avant utilisation";
        if (!recommendation.partie_utilisee) recommendation.partie_utilisee = "Diverses parties de la plante";
        if (!recommendation.composants) recommendation.composants = "Composants actifs √† d√©terminer";
        if (!recommendation.nom_local) recommendation.nom_local = recommendation.plant || "Nom local non disponible";
          console.log("Tous les champs requis ont √©t√© ajout√©s √† la recommandation pour garantir une restauration identique dans l'historique");
        
        // G√©rer les indicateurs de fallback et incr√©menter/r√©initialiser le compteur de tentatives
        if (recommendation.needs_more_details) {
          // Premi√®re tentative sans correspondance - incr√©menter pour la prochaine fois
          setAttemptCount(prev => prev + 1);
          console.log("Premi√®re tentative sans correspondance d√©tect√©e, compteur incr√©ment√© √†:", attemptCount + 1);
        } else if (recommendation.requires_consultation) {
          // Deuxi√®me tentative sans correspondance - r√©initialiser le compteur pour une nouvelle conversation
          setAttemptCount(1);
          console.log("Deuxi√®me tentative sans correspondance d√©tect√©e, compteur r√©initialis√© √† 1");
        } else {
          // Recommandation trouv√©e - r√©initialiser le compteur pour une nouvelle s√©rie de tentatives
          setAttemptCount(1);
          console.log("Recommandation trouv√©e, compteur r√©initialis√© √† 1");
        }
        
        const botResponse: Message = {
          id: (Date.now() + 1).toString(),
          content: `J'ai analys√© vos sympt√¥mes et je vous recommande le rem√®de suivant √† base de **${recommendation.plant}**. Retrouvez ci-dessus la fiche d√©taill√©e avec pr√©paration et dosage recommand√©s.`,
          sender: "bot",
          timestamp: new Date(),
          recommendation,};
        
        setMessages((prev) => [...prev, botResponse]);
        
        // La sauvegarde automatique est g√©r√©e dans handleSendMessage pour √©viter les doublons
        // Plus besoin d'appeler saveConversation ici - la logique de sauvegarde unifi√©e 
        // est dans handleSendMessage
      } catch (error) {
        console.error("Erreur lors de l'appel √† l'API:", error);
        
        const errorMessage: Message = {
          id: (Date.now() + 1).toString(),
          content: "Je suis d√©sol√©, une erreur est survenue lors de la recherche d'un rem√®de adapt√©. Veuillez v√©rifier que le serveur backend est bien d√©marr√© ou essayez une description diff√©rente de vos sympt√¥mes.",
          sender: "bot",
          timestamp: new Date(),
        };
        
        setMessages((prev) => [...prev, errorMessage]);
      } finally {
        setIsLoading(false);
      }
    } else {
      // Mode discussion - appel √† l'API de chat
      setIsLoading(true);
      
      try {        console.log("Envoi de la requ√™te au backend en mode Discussion pour:", messageText);        // Appel √† l'API /chat pour le mode discussion
        const response = await fetch(`${BASE_URL}/chat`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ message: messageText }), // Utiliser 'message' comme attendu par le backend
          mode: "cors",
          cache: "no-cache",
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error("R√©ponse du serveur non valide:", response.status, errorText);
          throw new Error(`Erreur: ${response.status} - ${errorText}`);
        }
        
        const data = await response.json();
        console.log("R√©ponse du backend (mode discussion):", data);
        
        if (!data.response) {
          console.warn("‚ö†Ô∏è Aucune r√©ponse dans la donn√©e re√ßue");
        }
          const botResponse: Message = {
          id: (Date.now() + 1).toString(),
          content: data.response || `Merci pour votre question sur : "${messageText}". Je suis l√† pour discuter de phytoth√©rapie africaine avec vous.`,
          sender: "bot",
          timestamp: new Date(),
        }
        
        setMessages((prev) => [...prev, botResponse]);
        
        // La sauvegarde automatique est g√©r√©e dans handleSendMessage pour √©viter les doublons
        // Plus besoin d'appeler saveConversation ici - la logique de sauvegarde unifi√©e 
        // est dans handleSendMessage
      } catch (error) {
        console.error("Erreur lors de l'appel √† l'API chat:", error);
        
        // Fallback en cas d'erreur
        const errorResponse: Message = {
          id: (Date.now() + 1).toString(),
          content: `D√©sol√©, je n'ai pas pu traiter votre question : "${messageText}". Le serveur est-il bien d√©marr√© ? Vous pouvez r√©essayer ou passer en mode Consultation.`,
          sender: "bot",
          timestamp: new Date(),
        }
        
        setMessages((prev) => [...prev, errorResponse]);
      } finally {
        setIsLoading(false);
      }
    }
  }

  const handleVoiceInput = () => {
    setIsListening(!isListening)
    // Ici, vous pourriez int√©grer une API de reconnaissance vocale
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault() // Emp√™cher le saut de ligne dans le textarea
      handleSendMessage() // Appeler la fonction avec l'√©v√©nement
    }
  }

  // Fonction pour mettre √† jour l'√©tat d'authentification de mani√®re coh√©rente
  const setIsAuthenticated = (value: boolean | ((prev: boolean) => boolean)) => {
    // Si la valeur est une fonction, l'appliquer √† l'√©tat actuel
    const newValue = typeof value === 'function' ? value(isAuthenticated) : value
    
    // Si une fonction de changement d'√©tat est fournie par les props, l'appeler
    if (onAuthChange) {
      onAuthChange(newValue)
    }
    
    // Mettre √©galement √† jour l'√©tat local
    setLocalIsAuthenticated(newValue)
    
    console.log("setIsAuthenticated appel√© avec", newValue, "props handler:", !!onAuthChange)
  }

  // Fonction pour aider au d√©bogage - √† supprimer en production
  // Utiliser useRef pour suivre la valeur pr√©c√©dente et √©viter les logs redondants
  const prevAuthState = React.useRef(isAuthenticated);
  const prevPropAuthState = React.useRef(propIsAuthenticated);
  
  React.useEffect(() => {
    // Ne logger que si l'√©tat a r√©ellement chang√©
    if (prevAuthState.current !== isAuthenticated || prevPropAuthState.current !== propIsAuthenticated) {
      console.log("√âtat d'authentification mis √† jour:", isAuthenticated, 
        "source:", propIsAuthenticated !== undefined ? "props" : "local");
      
      // Mettre √† jour les r√©f√©rences pour le prochain render
      prevAuthState.current = isAuthenticated;
      prevPropAuthState.current = propIsAuthenticated;
    }
  }, [isAuthenticated, propIsAuthenticated])
  // Effet pour charger une consultation sp√©cifique si consultationId est fourni
  useEffect(() => {
    let isMounted = true;
    const loadConsultation = async () => {
      if (consultationId && isAuthenticated) {
        console.log(`Chargement de la conversation: ${consultationId}`);
        setIsLoading(true);
          try {
          // Charger uniquement depuis la table conversations unifi√©es (historique sauvegard√©)
          console.log("Chargement de la conversation historique depuis la table conversations unifi√©es...");
          const unifiedConversation = await conversationUnifiedService.getConversationWithMessages(consultationId);
          
          if (unifiedConversation && unifiedConversation.messages && isMounted) {
            console.log(`Conversation historique r√©cup√©r√©e: Type=${unifiedConversation.type}, ${unifiedConversation.messages.length} messages`);
            
            // Convertir les messages de la conversation unifi√©e au format attendu
            const formattedMessages = unifiedConversation.messages.map((msg, index) => ({
              id: msg.id || `msg-${index}`,
              content: msg.content,
              sender: msg.sender,
              timestamp: msg.timestamp ? new Date(msg.timestamp) : new Date(),
              recommendation: msg.recommendation
            }));
              if (isMounted) {
              setMessages(formattedMessages);
              setChatMode(unifiedConversation.chat_mode || "discussion");
              
              // D√©finir currentConsultation avec les donn√©es de la conversation historique
              // Cela permet √† la sauvegarde automatique de fonctionner correctement
              setCurrentConsultation({
                id: consultationId,
                title: unifiedConversation.title || "Conversation historique",
                type: unifiedConversation.chat_mode || "discussion",
                messages: formattedMessages,
                created_at: unifiedConversation.created_at,
                updated_at: unifiedConversation.updated_at
              });
              
              // Marquer comme conversation historique pour √©viter la recr√©ation
              setIsHistoricalConsultation(true);
              console.log(`‚úÖ Conversation historique ${consultationId} charg√©e avec succ√®s - currentConsultation d√©fini`);
            }} else {
            // Si la conversation n'existe pas dans l'historique, afficher un message d'erreur
            console.log("Conversation historique non trouv√©e dans la table unifi√©e");
            if (isMounted) {
              console.error("La conversation demand√©e n'existe pas dans l'historique");
            }
          }
        } catch (error) {
          console.error("Erreur lors du chargement de la conversation historique:", error);
        } finally {
          if (isMounted) {
            setIsLoading(false);
          }
        }
      }
    };
    
    loadConsultation();
    
    // Nettoyer l'effet lors du d√©montage
    return () => {
      isMounted = false;
    };
  }, [consultationId, isAuthenticated]);

  // Effet pour charger la conversation depuis les props (uniquement au montage initial)
  useEffect(() => {
    let isMounted = true;
    
    // Fonction asynchrone pour traiter le chargement
    const loadConversation = async () => {
      // Uniquement au chargement initial et si on n'a pas de consultationId
      if (currentConversation && !consultationId && messages.length === 0) {
        console.log("Chargement de la conversation pr√©c√©dente depuis les props:", currentConversation);
        
        // Si la conversation existe et contient des messages, les charger
        if (currentConversation.messages && currentConversation.messages.length > 0) {
          try {
            // Cr√©er des copies profondes pour √©viter les probl√®mes de r√©f√©rence
            // Et convertir les timestamps en objets Date
            const messagesCopy = currentConversation.messages.map((m: any) => ({
              id: m.id || Date.now().toString(),
              content: m.content,
              sender: m.sender,
              timestamp: m.timestamp ? new Date(m.timestamp) : new Date(),
              recommendation: m.recommendation
            }));
            
            if (isMounted) {
              setMessages(messagesCopy);
              
              // Si un mode est d√©fini, l'utiliser
              if (currentConversation.mode) {
                setChatMode(currentConversation.mode);
              }
              
              // Si une consultation est associ√©e, la d√©finir
              if (currentConversation.consultation) {
                const consultationCopy = JSON.parse(JSON.stringify(currentConversation.consultation));
                setCurrentConsultation(consultationCopy);
                
                // V√©rifier si la consultation existe d√©j√† dans la base de donn√©es
                if (consultationCopy.id) {
                  // Marquer comme historique pour √©viter une recr√©ation
                  setIsHistoricalConsultation(true);
                  console.log("Conversation restaur√©e depuis une consultation existante:", consultationCopy.id);
                }
              }
            }
          } catch (error) {
            console.error("Erreur lors de la restauration de la conversation:", error);
          }
        }
      }
    };
    
    loadConversation();
    
    return () => {
      isMounted = false;
    };
    // Ex√©cuter ce code uniquement au montage initial du composant
  }, []);
    // Fonction pour cr√©er une nouvelle conversation
  const handleNewConversation = async () => {
    // Pour les conversations historiques : ne pas cr√©er de nouvelle consultation, 
    // juste r√©initialiser l'interface pour une nouvelle discussion
    if (currentConsultation?.id) {
      console.log(`Fin de la modification de la consultation ${currentConsultation.id}, d√©marrage d'une nouvelle conversation`);
      
      // Les nouveaux messages ont d√©j√† √©t√© sauvegard√©s automatiquement lors de la conversation
      // Il n'y a donc rien √† sauvegarder ici, juste r√©initialiser l'interface
      
      // R√©initialiser l'interface pour une nouvelle conversation
      setMessages([]);
      setInputValue("");
      setChatMode("discussion");
      setCurrentConsultation(null); // Lib√©rer la consultation historique
      setIsHistoricalConsultation(false);
      
      // R√©initialiser les autres √©tats
      setUserChooseContinueWithoutLogin(false);
      setPendingSaveConversation(false);
      setPendingMessage("");
      
      // Notifier le composant parent
      if (onConversationChange) {
        setTimeout(() => {
          onConversationChange({
            messages: [],
            mode: "discussion",
            consultation: null
          });
        }, 100);
      }
      
      console.log("Interface r√©initialis√©e pour une nouvelle conversation");
      return;
    }
    
    // Pour les nouvelles conversations (non historiques) : sauvegarder si n√©cessaire avant de r√©initialiser
    const hasUserMessage = messages.some(m => m.sender === "user");
    const hasBotMessage = messages.some(m => m.sender === "bot");
    const isValidConversation = isAuthenticated && messages.length >= 4 && hasUserMessage && hasBotMessage;
    
    if (isValidConversation) {
      try {
        console.log("Sauvegarde de la session compl√®te avant d'en cr√©er une nouvelle");
        
        // Sauvegarder la conversation dans la table unifi√©e
        const conversationId = await saveUnifiedConversation(messages, chatMode);
        if (conversationId) {
          console.log(`Conversation sauvegard√©e avec succ√®s dans la table unifi√©e, ID: ${conversationId}`);
        } else {
          console.warn("√âchec de la sauvegarde unifi√©e, utilisation de la m√©thode traditionnelle");
          // Cr√©er une nouvelle consultation contenant toute la session
          await createNewConsultation();
          console.log("Nouvelle session compl√®te sauvegard√©e avec succ√®s");
        }
      } catch (error) {
        console.error("Erreur lors de la sauvegarde de la session:", error);
      }
    } else if (messages.length > 0) {
      console.log("Session ignor√©e pour la sauvegarde car incompl√®te ou utilisateur non connect√©");
    }
    
    // R√©initialiser tous les √©tats pour une nouvelle conversation
    setMessages([]);
    setInputValue("");
    setChatMode("discussion");
    setCurrentConsultation(null);
    setIsHistoricalConsultation(false);
    
    // R√©initialiser √©galement l'√©tat de choix de l'utilisateur
    setUserChooseContinueWithoutLogin(false);
    setPendingSaveConversation(false);
    setPendingMessage("");
    
    // Notifier le composant parent du changement de conversation
    // Utiliser setTimeout pour √©viter les mises √† jour en cascade
    if (onConversationChange) {
      setTimeout(() => {
        onConversationChange({
          messages: [],
          mode: "discussion",
          consultation: null
        });
      }, 100);
    }
    
    console.log("Nouvelle conversation initi√©e");
  };

  // Fonction utilitaire pour formater les timestamps des messages en toute s√©curit√©
  const formatTimestamp = (timestamp: Date | string | undefined): string => {
    if (!timestamp) return '';
    
    try {
      // Si c'est d√©j√† un objet Date, utiliser directement toLocaleTimeString
      if (timestamp instanceof Date) {
        return timestamp.toLocaleString('fr-FR', {
          hour: '2-digit',
          minute: '2-digit'
        });
      }
      
      // Si c'est une cha√Æne de caract√®res, essayer de la convertir en Date
      if (typeof timestamp === 'string') {
        return new Date(timestamp).toLocaleString('fr-FR', {
          hour: '2-digit',
          minute: '2-digit'
        });
      }
      
      // Cas par d√©faut: renvoyer une cha√Æne vide
      return '';
    } catch (error) {
      console.error("Erreur lors du formatage du timestamp:", error);
      return '';
    }
  };

  // Effet pour mettre √† jour la conversation dans le composant parent
  useEffect(() => {
    // √âviter les mises √† jour lorsqu'on charge une conversation existante
    if (isHistoricalConsultation) return;
    
    // Utiliser un effet √† retardement pour r√©duire la fr√©quence des mises √† jour
    // et √©viter les boucles de mise √† jour
    const conversationUpdateTimer = setTimeout(() => {
      if (onConversationChange && messages.length > 0) {
        console.log("Mise √† jour de la conversation dans le composant parent");
        
        // Cr√©er une copie des messages en pr√©servant les objets Date
        const messagesCopy = messages.map(m => ({
          ...m,
          // Assurer que timestamp est bien un objet Date
          timestamp: m.timestamp instanceof Date ? m.timestamp : new Date(m.timestamp || Date.now()),
          // S'assurer que la recommandation est bien copi√©e et non r√©f√©renc√©e
          recommendation: m.recommendation ? JSON.parse(JSON.stringify(m.recommendation)) : undefined
        }));
        
        // Copie profonde de la consultation pour √©viter les probl√®mes de r√©f√©rence
        const consultationCopy = currentConsultation ? JSON.parse(JSON.stringify(currentConsultation)) : null;
        
        onConversationChange({
          messages: messagesCopy,
          mode: chatMode,
          consultation: consultationCopy
        });
      }
    }, 300); // Ajouter un d√©lai pour r√©duire la fr√©quence des mises √† jour
    
    // Nettoyer le timer lors du d√©montage du composant ou d'une nouvelle mise √† jour
    return () => clearTimeout(conversationUpdateTimer);
  }, [messages.length, chatMode, currentConsultation?.id, onConversationChange, isHistoricalConsultation]);

  // R√©f√©rences pour suivre les changements d'authentification
  const prevAuthenticated = React.useRef(isAuthenticated);
  const prevPropAuthenticated = React.useRef(propIsAuthenticated);

  // Effet pour surveiller les changements d'authentification et r√©initialiser si d√©connexion
  useEffect(() => {
    // D√©tecter une d√©connexion : soit par props, soit par √©tat local
    if ((prevPropAuthenticated.current === true && propIsAuthenticated === false) || 
        (prevAuthenticated.current === true && isAuthenticated === false)) {
      console.log("D√©connexion d√©tect√©e dans ChatInterface - Sauvegarde de la session compl√®te et r√©initialisation du chat");
      
      // Sauvegarder la conversation en cours avant de r√©initialiser si elle est valide
      const hasUserMessage = messages.some(m => m.sender === "user");
      const hasBotMessage = messages.some(m => m.sender === "bot");
      const isValidConversation = prevAuthenticated.current && messages.length > 0 && hasUserMessage && hasBotMessage;
      
      if (isValidConversation) {
        // Utiliser une fonction IIFE asynchrone pour permettre l'await
        (async () => {
          try {
            console.log("D√©connexion - Sauvegarde de la session compl√®te avec", messages.length, "messages");
            
            // IMPORTANT: Forcer la sauvegarde AVANT que le token ne soit invalid√©
            // R√©cup√©rer le token actuel qui est encore valide
            const token = authService.getToken();
            if (!token) {
              console.log("D√©connexion - Pas de token valide, impossible de sauvegarder");
              return;
            }            // Si nous avons une consultation existante (historique modifi√©), 
            // les nouveaux messages ont d√©j√† √©t√© sauvegard√©s automatiquement pendant la conversation
            if (currentConsultation?.id) {
              console.log(`D√©connexion - Consultation existante ${currentConsultation.id} d√©j√† mise √† jour automatiquement - AUCUNE nouvelle sauvegarde`);
              // Rien √† faire : la sauvegarde s'est faite en temps r√©el lors de l'ajout de chaque message
              return; // Important : sortir imm√©diatement pour √©viter toute cr√©ation de doublon
            } 
            // Seulement si nous n'avons aucune consultation existante, cr√©er une nouvelle consultation
            else if (messages.length >= 2) {
              console.log("D√©connexion - Cr√©ation d'une nouvelle entr√©e d'historique pour la session en cours (aucune consultation existante)");
              
              // Utiliser directement l'API pour √©viter les probl√®mes avec le service
              try {
                // Pr√©parer les donn√©es de la consultation
                const firstUserMessage = messages.find(m => m.sender === "user");
                const title = firstUserMessage 
                  ? firstUserMessage.content.substring(0, 50) + (firstUserMessage.content.length > 50 ? "..." : "") 
                  : "Session sauvegard√©e √† la d√©connexion";
                
                // Pr√©parer les messages
                const messagesToSend = messages.map(m => ({
                  content: m.content,
                  sender: m.sender,
                  recommendation: m.recommendation ? JSON.parse(JSON.stringify(m.recommendation)) : undefined
                }));                  // Envoi direct √† l'API
                const response = await fetch(`${API_URL}/api/consultations`, {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                  },
                  body: JSON.stringify({
                    title,
                    type: chatMode,
                    messages: messagesToSend
                  }),
                });
                  if (response.ok) {
                  const newConsultation = await response.json();
                  console.log("D√©connexion - Nouvelle session sauvegard√©e avec succ√®s:", newConsultation.id);
                } else {
                  console.error("D√©connexion - √âchec de la cr√©ation de la consultation:", await response.text());
                }
              } catch (error) {
                console.error("D√©connexion - Erreur lors de la cr√©ation de la consultation:", error);
              }
            } else {
              console.log("Session ignor√©e pour la sauvegarde car aucune consultation existante et conversation incompl√®te ou utilisateur non connect√©");
            }
          } catch (error) {
            console.error("D√©connexion - Erreur lors de la sauvegarde de la session compl√®te:", error);
          }
        })();
      } else {
        console.log("D√©connexion - Pas de session valide √† sauvegarder");
      }
      
      // R√©initialiser les messages imm√©diatement
      setMessages([]);
      
      // R√©initialiser l'input
      setInputValue("");
      
      // R√©initialiser le mode de discussion
      setChatMode("discussion");
      
      // R√©initialiser la consultation actuelle
      setCurrentConsultation(null);
      
      // R√©initialiser l'√©tat de consultation historique
      setIsHistoricalConsultation(false);
      
      // R√©initialiser l'√©tat du choix utilisateur
      setUserChooseContinueWithoutLogin(false);
      setPendingSaveConversation(false);
      setPendingMessage("");
      
      // Notifier le composant parent
      if (onConversationChange) {
        onConversationChange({
          messages: [],
          mode: "discussion",
          consultation: null
        });
      }
      
      // Forcer la mise √† jour de l'√©tat local d'authentification
      setLocalIsAuthenticated(false);
    }
    
    // Mettre √† jour les r√©f√©rences pour le prochain render
    prevAuthenticated.current = isAuthenticated;
    prevPropAuthenticated.current = propIsAuthenticated;
  }, [propIsAuthenticated, isAuthenticated, onConversationChange]);

  // Effet pour sauvegarder automatiquement lors de la navigation (d√©montage du composant)
  useEffect(() => {
    // Fonction de nettoyage appel√©e lors du d√©montage du composant (navigation)
    return () => {
      // Sauvegarder automatiquement si nous avons une consultation existante avec des nouveaux messages
      if (currentConsultation?.id && messages.length > 0 && isAuthenticated) {
        console.log("Navigation d√©tect√©e - Sauvegarde automatique des derniers messages");
        
        // Sauvegarder de mani√®re asynchrone les derniers messages non sauvegard√©s
        // Note: Ce sera ex√©cut√© de mani√®re asynchrone, les messages seront sauvegard√©s
        (async () => {
          try {
            // Identifier les nouveaux messages qui pourraient ne pas √™tre sauvegard√©s
            const existingMessageIds = new Set(
              (currentConsultation.messages || [])
                .filter(m => m.id)
                .map(m => m.id?.toString())
            );
            
            // Trouver les messages r√©cents qui ne sont pas encore sauvegard√©s
            const recentMessages = messages.slice(-2).filter(m => !existingMessageIds.has(m.id?.toString()));
            
            if (recentMessages.length > 0) {
              console.log(`Navigation - Sauvegarde de ${recentMessages.length} messages r√©cents`);
                // Sauvegarder chaque message r√©cent
              for (const message of recentMessages) {
                try {
                  // Utiliser l'API conversations unifi√©es au lieu de l'API consultations                  console.log(`Navigation - Sauvegarde du message ${message.sender} dans la conversation unifi√©e ${currentConsultation.id}`);
                  
                  const response = await fetch(`${API_URL}/api/conversations/${currentConsultation.id}/messages`, {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                      "Authorization": `Bearer ${authService.getToken()}`
                    },
                    body: JSON.stringify({
                      content: message.content,
                      sender: message.sender,
                      recommendation: message.recommendation
                    })
                  });
                  
                  if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                  }
                } catch (error) {
                  console.error("Navigation - Erreur lors de la sauvegarde d'un message:", error);
                }
              }
              console.log("Navigation - Messages sauvegard√©s avec succ√®s");
            }
          } catch (error) {
            console.error("Navigation - Erreur lors de la sauvegarde automatique:", error);
          }
        })();
      }
    };
  }, [currentConsultation?.id, messages, isAuthenticated]); // D√©pendances pour capturer l'√©tat actuel

  return (
    <div className="space-y-6">
      {onBack && (
        <div className="flex items-center justify-between gap-4 mb-6">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" onClick={onBack} className="text-emerald-700 hover:text-emerald-800">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Retour
            </Button>
            <div>
              <h2 className="text-2xl font-bold text-emerald-800">Assistant aiBotanik</h2>
              {isHistoricalConsultation && currentConsultation && (
                <p className="text-sm text-emerald-600 mt-1">
                  Conversation reprise du {new Date(currentConsultation.date || Date.now()).toLocaleDateString('fr-FR')}
                </p>
              )}
            </div>
          </div>
          
          <div className="flex items-center gap-3">
            {/* Bouton de connexion */}
            {!isAuthenticated && (
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => setIsLoginModalOpen(true)} 
                className="text-emerald-700 border-emerald-200 hover:bg-emerald-50"
              >
                <LogIn className="h-4 w-4 mr-2" />
                Se connecter
              </Button>
            )}
          </div>
        </div>
      )}

      <Card className="border-emerald-100">
        <CardContent className="p-6">
          {/* Zone de messages */}
          <div className="min-h-[300px] max-h-[500px] md:min-h-[400px] md:max-h-[600px] overflow-y-auto mb-6 space-y-4">
            {isLoading && (
              <div className="absolute inset-0 bg-white/50 flex items-center justify-center z-20">
                <div className="flex flex-col items-center gap-3 bg-white p-6 rounded-xl shadow-md">
                  <Loader2 className="h-8 w-8 text-emerald-600 animate-spin" />
                  <p className="text-emerald-800">Recherche de rem√®des naturels...</p>
                </div>
              </div>
            )}
            
            {messages.length === 0 ? (
              <div className="space-y-6">
                <div className="text-center">
                  <div className="w-20 h-20 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Bot className="h-10 w-10 text-white" />
                  </div>
                  <h3 className="text-xl font-semibold text-emerald-800 mb-2">Bienvenue sur aiBotanik</h3>
                </div>
                <div className="bg-gradient-to-r from-emerald-50 to-amber-50 rounded-xl p-6 border border-emerald-100">
                  <p className="text-emerald-800 leading-relaxed text-center">{welcomeText}</p>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  <div className="bg-white rounded-lg p-4 border border-emerald-100">
                    <h4 className="font-medium text-emerald-800 mb-2">üí° Exemples de questions</h4>
                    <ul className="text-sm text-gray-600 space-y-1">
                      <li>‚Ä¢ "J'ai mal √† la t√™te depuis 2 jours"</li>
                      <li>‚Ä¢ "Quels rem√®des pour la toux ?"</li>
                      <li>‚Ä¢ "Plantes contre l'insomnie"</li>
                    </ul>
                  </div>
                  <div className="bg-white rounded-lg p-4 border border-amber-100">
                    <h4 className="font-medium text-amber-800 mb-2">üåø Je peux vous aider avec</h4>
                    <ul className="text-sm text-gray-600 space-y-1">
                      <li>‚Ä¢ Rem√®des traditionnels</li>
                      <li>‚Ä¢ Dosages et pr√©parations</li>
                      <li>‚Ä¢ Conseils de pr√©vention</li>
                    </ul>
                  </div>
                </div>
              </div>
            ) : (
              <div className="space-y-8">
                {messages.map((message, index) => {
                  // V√©rifier et debugger les messages avec recommandations
                  if (message.recommendation) {
                    console.log(`Affichage du message ${message.id} avec recommandation:`, 
                      typeof message.recommendation === 'object' ? message.recommendation.plant : typeof message.recommendation);
                  }
                  
                  // Valider que la recommendation est bien un objet avant affichage
                  const hasValidRecommendation = message.recommendation && 
                    typeof message.recommendation === 'object' &&
                    message.recommendation !== null;
                  
                  if (message.recommendation && !hasValidRecommendation) {
                    console.error(`Message ${message.id} contient une recommandation invalide:`, 
                      typeof message.recommendation);
                  }
                  
                  return (
                    <React.Fragment key={message.id}>
                      {/* Afficher la recommandation seulement pour les messages du bot qui ont une recommendation valide */}
                      {message.sender === "bot" && hasValidRecommendation && (
                        <div className="mb-8 mt-4">
                          <PlantRecommendationCard recommendation={message.recommendation as PlantRecommendation} />
                        </div>
                      )}
                      <div
                        className={`flex items-start gap-3 ${message.sender === "user" ? "flex-row-reverse" : ""}`}
                      >
                        <div
                          className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                            message.sender === "user" ? "bg-blue-100" : "bg-emerald-100"
                          }`}
                        >
                          {message.sender === "user" ? (
                            <User className="h-4 w-4 text-blue-600" />
                          ) : (
                            <Bot className="h-4 w-4 text-emerald-600" />
                          )}
                        </div>
                        <div
                          className={`rounded-lg p-4 max-w-[80%] ${
                            message.sender === "user" ? "bg-blue-50 text-blue-800" : "bg-emerald-50 text-emerald-800"
                          }`}
                        >
                          <p className="whitespace-pre-line">{message.content}</p>
                          <span className="text-xs opacity-60 mt-2 block">{formatTimestamp(message.timestamp)}</span>
                          
                          {/* Message d'erreur si la recommandation est invalide mais cens√©e √™tre affich√©e */}
                          {message.sender === "bot" && message.recommendation && !hasValidRecommendation && (
                            <div className="mt-2 p-2 bg-amber-50 border border-amber-200 rounded text-amber-700 text-sm">
                              ‚ö†Ô∏è Cette r√©ponse contient une recommandation de plante qui ne peut pas √™tre affich√©e correctement.
                            </div>
                          )}
                        </div>
                      </div>
                    </React.Fragment>
                  );
                })}
              </div>
            )}
          </div>

          {/* Zone de saisie */}
          <div className="flex justify-center">
            <div className="w-full max-w-4xl">
              {/* Utiliser un formulaire pour √©viter les comportements de navigation par d√©faut */}
              <form onSubmit={handleSendMessage} className="flex gap-2 items-end">
                <div className="flex-1 relative">
                  <div className="relative">                    {/* Boutons de mode int√©gr√©s dans le textarea */}
                    <div className="absolute left-2 top-2 flex items-center gap-1 z-10">
                      <button
                        type="button" /* Ajouter type="button" pour √©viter la soumission du formulaire */
                        onClick={() => setChatMode("discussion")}
                        className={`flex items-center gap-1 px-1.5 py-0.5 rounded-md text-xs font-medium transition-all ${
                          chatMode === "discussion"
                            ? "bg-emerald-500 text-white shadow-sm"
                            : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                        }`}
                      >
                        <MessageCircle className="h-3 w-3" />
                        Discussion
                      </button>
                      <button
                        type="button" /* Ajouter type="button" pour √©viter la soumission du formulaire */
                        onClick={() => setChatMode("consultation")}
                        className={`flex items-center gap-1 px-1.5 py-0.5 rounded-md text-xs font-medium transition-all ${
                          chatMode === "consultation"
                            ? "bg-blue-500 text-white shadow-sm"
                            : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                        }`}
                      >
                        <Stethoscope className="h-3 w-3" />
                        Consultation
                      </button>
                    </div><Textarea
                      value={inputValue}
                      onChange={(e) => setInputValue(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder={
                        chatMode === "discussion"
                          ? "Posez votre question sur la phytoth√©rapie..."
                          : "D√©crivez vos sympt√¥mes pour une consultation..."
                      }
                      className="w-full min-h-[75px] pl-4 pr-9 pt-9 pb-3 resize-none border-emerald-200 focus:border-emerald-400 rounded-2xl"
                    />                    <Button
                      type="button" /* Ajouter type="button" pour √©viter la soumission du formulaire */
                      size="sm"
                      variant="ghost"
                      className={`absolute right-2 bottom-1 ${isListening ? "text-red-500" : "text-emerald-600"}`}
                      onClick={handleVoiceInput}
                    >
                      <Mic className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
                <Button
                  type="submit" /* Sp√©cifier qu'il s'agit d'un bouton de soumission */
                  disabled={!inputValue.trim() || isLoading}
                  className="bg-emerald-600 hover:bg-emerald-700 px-4 rounded-2xl h-[40px]"
                >
                  {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
                </Button>
                
                {/* Bouton pour nouvelle conversation - toujours visible √† c√¥t√© du bouton d'envoi */}
                <Button
                  type="button"
                  onClick={handleNewConversation}
                  title="Nouvelle conversation"
                  className="bg-amber-500 hover:bg-amber-600 px-3 rounded-2xl h-[40px]"
                >
                  <PlusCircle className="h-4 w-4" />
                </Button>
              </form>
            </div>
          </div>
        </CardContent>
      </Card>
      
      {/* Modal d'authentification requise */}
      <AuthRequiredModal
        isOpen={isAuthModalOpen}
        onClose={() => setIsAuthModalOpen(false)}
        onLogin={handleLogin}
        onContinueWithoutLogin={handleContinueWithoutLogin}
      />
      
      {/* Modal de connexion */}
      <LoginModal
        open={isLoginModalOpen}
        onOpenChange={setIsLoginModalOpen}
        onLoginSuccess={handleLoginSuccess}
      />
    </div>
  )
}
